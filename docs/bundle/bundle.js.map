{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://@theatrejs/example-overlay-gamepad/webpack/runtime/async module","webpack://@theatrejs/example-overlay-gamepad/./sources/index.js","webpack://@theatrejs/example-overlay-gamepad/./sources/states/color.state.js","webpack://@theatrejs/example-overlay-gamepad/./sources/states/resolution.state.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/plugin-aseprite/sources/factories.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/plugin-aseprite/sources/aseprite.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/plugin-aseprite/sources/spritesheet.js","webpack://@theatrejs/example-overlay-gamepad/./sources/stages/overlay-gamepad/actors/overlay-gamepad/spritesheets/gamepad-xbox/gamepad-xbox.aseprite","webpack://@theatrejs/example-overlay-gamepad/./sources/stages/overlay-gamepad/actors/overlay-gamepad/spritesheets/gamepad-xbox-inputs/gamepad-xbox-inputs.aseprite","webpack://@theatrejs/example-overlay-gamepad/./sources/stages/overlay-gamepad/actors/overlay-gamepad/overlay-gamepad.actor.js","webpack://@theatrejs/example-overlay-gamepad/./sources/stages/overlay-gamepad/overlay-gamepad.stage.js","webpack://@theatrejs/example-overlay-gamepad/./sources/states/stage.state.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/constants/collider-types.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/constants/event-codes/gamepad.standard.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/constants/event-codes/gamepad.xbox.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/constants/event-codes/gravity.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/constants/event-codes/gyroscope.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/constants/event-types/gamepad.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/constants/event-types/gravity.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/constants/event-types/gyroscope.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/constants/event-types/keyboard.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/constants/event-types/native.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/constants/event-types/pointer.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/constants/mathematics.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/constants/media-types.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/constants/shader-parameter-types.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/core/preloadable.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/core/actor.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/core/stage.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/core/aabb.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/core/collider.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/core/engine.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/core/factories.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/core/loop.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/core/shader.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/core/sprite.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/core/state.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/core/system.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/core/timeline.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/core/timeline-keyframe.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/core/utils.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/core/vector2.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/core/vector3.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/core/vibration.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/events/gamepad.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/events/gamepad-analog.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/events/gamepad-digital.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/events/gravity-analog.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/events/gravity-digital.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/events/gyroscope-analog.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/events/gyroscope-digital.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/events/pointer-analog.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/events/pointer-digital.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/extensions/gamepad.extension.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/systems/actor.system.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/systems/audio.system.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/systems/collision.system.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/systems/input.system.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/systems/render.system.js","webpack://@theatrejs/example-overlay-gamepad/./node_modules/@theatrejs/theatrejs/sources/systems/vibration.system.js","webpack://@theatrejs/example-overlay-gamepad/webpack/bootstrap","webpack://@theatrejs/example-overlay-gamepad/webpack/runtime/define property getters","webpack://@theatrejs/example-overlay-gamepad/webpack/runtime/global","webpack://@theatrejs/example-overlay-gamepad/webpack/runtime/hasOwnProperty shorthand","webpack://@theatrejs/example-overlay-gamepad/webpack/runtime/make namespace object","webpack://@theatrejs/example-overlay-gamepad/webpack/runtime/publicPath","webpack://@theatrejs/example-overlay-gamepad/webpack/startup"],"sourcesContent":["var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && queue.d < 1) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = -1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && queue.d < 0 && (queue.d = 0);\n};","import {Engine, ExtensionGamepad} from '@theatrejs/theatrejs';\n\nimport {getStage} from 'states/stage.state.js';\n\nExtensionGamepad.activate();\n\nconst engine = new Engine();\nengine.initiate(25);\n\nawait engine.preloadStage(getStage());\nengine.createStage(getStage());\n","import {State, Vector3} from '@theatrejs/theatrejs';\n\n/**\n * The state manager of the color.\n * @type {State<Vector3>}\n * @constant\n */\nconst stateColor = new State(new Vector3(34 / 255, 32 / 255, 52 / 255));\n\n/**\n * Gets the color.\n * @returns {Vector3}\n */\nfunction getColor() {\n\n    return stateColor.getState();\n}\n\nexport {\n\n    stateColor,\n\n    getColor\n};\n","import {State, Vector2} from '@theatrejs/theatrejs';\n\n/**\n * The state manager of the resolution.\n * @type {State<Vector2>}\n * @constant\n */\nconst stateResolution = new State(new Vector2(320, 240));\n\n/**\n * Gets the resolution.\n * @returns {Vector2}\n */\nfunction getResolution() {\n\n    return stateResolution.getState();\n}\n\nexport {\n\n    stateResolution,\n\n    getResolution\n};\n","import {Actor, Preloadable, Vector2} from '@theatrejs/theatrejs';\n\nimport {Aseprite, Spritesheet} from './index.js';\n\n/**\n * @module FACTORIES\n */\n\n/**\n * Prepares an actor with spritesheet.\n * @template {string} TypeGeneric The generic type of the tags.\n * @param {Object} $parameters The given parameters.\n * @param {Aseprite<TypeGeneric>} $parameters.$aseprite The Aseprite module manager.\n * @param {boolean} [$parameters.$loop] The loop status.\n * @param {TypeGeneric} $parameters.$tag The given tag.\n * @returns {typeof Actor<string, string>}\n *\n * @memberof module:FACTORIES\n */\nfunction ActorWithSpritesheet({$aseprite, $loop = true, $tag}) {\n\n    /**\n     * @ignore\n     */\n    class ActorWithSpritesheet extends Actor {\n\n        /**\n         * Stores the Aseprite spritesheet.\n         * @type {Spritesheet<TypeGeneric>}\n         * @private\n         */\n        $spritesheet;\n\n        /**\n         * Called when the actor is being created.\n         * @public\n         */\n        onCreate() {\n\n            this.$spritesheet = new Spritesheet(/** @type {Aseprite<TypeGeneric>} **/($aseprite));\n\n            this.$spritesheet.animate($tag, $loop);\n        }\n\n        /**\n         * Called when the actor is being updated by one tick update.\n         * @param {number} $timetick The tick duration (in ms).\n         * @public\n         */\n        onTick($timetick) {\n\n            this.$spritesheet.tick($timetick);\n\n            if (this.sprite !== this.$spritesheet.sprite) {\n\n                this.setSprite(this.$spritesheet.sprite);\n            }\n        }\n    }\n\n    return ActorWithSpritesheet;\n}\n\n/**\n * Prepares an actor with text.\n * @param {Object} $parameters The given parameters.\n * @param {('center' | 'left' | 'right')} [$parameters.$align] The horizontal alignment.\n * @param {('bottom' | 'bottom-left' | 'bottom-right' | 'center' | 'left' | 'right' | 'top' | 'top-left' | 'top-right')} [$parameters.$anchor] The anchor position.\n * @param {Aseprite<string>} $parameters.$font The Aseprite module manager of the font (with the Aseprite tags corresponding to the characters used in the text).\n * @param {number} [$parameters.$heightLines] The height of the lines.\n * @param {number} [$parameters.$spacingCharacters] The spacing between the characters.\n * @param {string} $parameters.$text The text to use (with '\\n' being a special character controlling the carriage return).\n * @returns {typeof Actor<string, string>}\n *\n * @memberof module:FACTORIES\n */\nfunction ActorWithText({$align = 'left', $anchor = 'center', $font, $heightLines = 16, $spacingCharacters = 1, $text}) {\n\n    /**\n     * @ignore\n     */\n    class ActorWithText extends Actor {\n\n        /**\n         * Stores the characters.\n         * @type {Array<Actor>}\n         * @private\n         */\n        $characters;\n\n        /**\n         * Called just before removing the actor.\n         * @public\n         */\n        onBeforeRemove() {\n\n            [...this.$characters].forEach(($characters) => {\n\n                this.stage.removeActor($characters);\n            });\n        }\n\n        /**\n         * Called when the actor is being created.\n         * @public\n         */\n        onCreate() {\n\n            this.$characters = [];\n\n            let widthText = 0;\n\n            const rows = $text.split('\\n').map(($row) => {\n\n                let widthRow = 0;\n\n                const row = Array.from($row).map(($character) => {\n\n                    const sprites = Array.from($font.getSprites($character));\n\n                    const widthCharacter = Math.max(...sprites.map(([$sprite]) => ($sprite.sizeTarget.x)));\n\n                    widthRow += widthCharacter;\n\n                    return {\n\n                        $character: $character,\n                        $widthCharacter: widthCharacter\n                    };\n                });\n\n                widthRow += ($row.length - 1) * $spacingCharacters;\n\n                if (widthRow > widthText) {\n\n                    widthText = widthRow;\n                }\n\n                return {\n\n                    $heightRow: $heightLines,\n                    $row: row,\n                    $widthRow: widthRow\n                };\n            });\n\n            const text = {\n\n                $heightText: rows.length * $heightLines,\n                $rows: rows,\n                $widthText: widthText\n            };\n\n            let anchorLeft;\n            let anchorTop;\n\n            switch($anchor) {\n\n                case 'bottom': {\n\n                    anchorLeft = - (text.$widthText / 2);\n                    anchorTop = text.$heightText;\n\n                    break;\n                }\n\n                case 'bottom-left': {\n\n                    anchorLeft = 0;\n                    anchorTop = text.$heightText;\n\n                    break;\n                }\n\n                case 'bottom-right': {\n\n                    anchorLeft = - text.$widthText;\n                    anchorTop = text.$heightText;\n\n                    break;\n                }\n\n                case 'left': {\n\n                    anchorLeft = 0;\n                    anchorTop = text.$heightText / 2;\n\n                    break;\n                }\n\n                case 'right': {\n\n                    anchorLeft = - text.$widthText;\n                    anchorTop = text.$heightText / 2;\n\n                    break;\n                }\n\n                case 'top': {\n\n                    anchorLeft = - (text.$widthText / 2);\n                    anchorTop = 0;\n\n                    break;\n                }\n\n                case 'top-left': {\n\n                    anchorLeft = 0;\n                    anchorTop = 0;\n\n                    break;\n                }\n\n                case 'top-right': {\n\n                    anchorLeft = - text.$widthText;\n                    anchorTop = 0;\n\n                    break;\n                }\n\n                case 'center':\n                default: {\n\n                    anchorLeft = - (text.$widthText / 2);\n                    anchorTop = text.$heightText / 2;\n                }\n            }\n\n            let left = anchorLeft;\n            let top = anchorTop;\n\n            text.$rows.forEach(({$row, $widthRow}) => {\n\n                switch($align) {\n\n                    case 'center': {\n\n                        left += (text.$widthText - $widthRow) / 2;\n\n                        break;\n                    }\n\n                    case 'right': {\n\n                        left += (text.$widthText - $widthRow);\n\n                        break;\n                    }\n\n                    case 'left':\n                    default: {\n\n                        break;\n                    }\n                }\n\n                top -= $heightLines;\n\n                $row.forEach(({$character, $widthCharacter}) => {\n\n                    const character = this.stage.createActor(\n\n                        ActorWithSpritesheet({\n\n                            $aseprite: $font,\n                            $loop: true,\n                            $tag: $character\n                        })\n                    )\n                    .setVisible(this.visible)\n                    .setZIndex(this.zIndex)\n                    .translate(new Vector2(left + Math.ceil($widthCharacter / 2), top + Math.ceil($heightLines / 2)));\n\n                    this.$characters.push(character);\n\n                    left += $spacingCharacters + $widthCharacter;\n                });\n\n                left = anchorLeft;\n            });\n        }\n\n        /**\n         * Called when the visible status is being set.\n         * @param {boolean} $visible The visible status set.\n         * @public\n         */\n        onSetVisible($visible) {\n\n            this.$characters.forEach(($character) => {\n\n                $character.setVisible($visible);\n            });\n        }\n\n        /**\n         * Called when the z-index is being set.\n         * @param {number} $zIndex The z-index set.\n         * @public\n         */\n        onSetZIndex($zIndex) {\n\n            this.$characters.forEach(($character) => {\n\n                $character.setZIndex($zIndex);\n            });\n        }\n\n        /**\n         * Called when the actor is being translated.\n         * @param {Vector2} $vector The translation applied.\n         * @public\n         */\n        onTranslate($vector) {\n\n            this.$characters.forEach(($character) => {\n\n                $character.translate($vector);\n            });\n        }\n    }\n\n    return ActorWithText;\n}\n\n/**\n * Prepares a preloadable Aseprite module.\n * @param {Aseprite<string>} $aseprite The preloadable Aseprite module.\n * @returns {typeof Preloadable}\n *\n * @memberof module:FACTORIES\n */\nfunction PreloadableAseprite($aseprite) {\n\n    /**\n     * @ignore\n     */\n    class PreloadableAseprite extends Preloadable {\n\n        /**\n         * Stores the preloadable assets.\n         * @type {Array<string>}\n         * @public\n         * @static\n         */\n        static preloadables = [$aseprite.texture];\n    }\n\n    return PreloadableAseprite;\n}\n\nexport {\n\n    ActorWithSpritesheet,\n    ActorWithText,\n    PreloadableAseprite\n};\n","import {AABB, Sprite, Vector2} from '@theatrejs/theatrejs';\n\n/**\n * Creates Aseprite module managers.\n * @template {string} TypeGeneric The generic type of the tags.\n *\n * @example\n *\n * const aseprite = new Aseprite(texture, data);\n * aseprite.getSprites(tag);\n */\nclass Aseprite {\n\n    /**\n     * @template {string} TypeGeneric The generic type of the tags.\n     * @typedef {Object} TypeAseprite An Aseprite JSON data.\n     * @property {Array<TypeAsepriteFrame>} TypeAseprite.frames The Aseprite JSON frames data.\n     * @property {TypeAsepriteMeta<TypeGeneric>} TypeAseprite.meta The Aseprite JSON meta data.\n     * @protected\n     *\n     * @memberof Aseprite\n     */\n\n    /**\n     * @typedef {Object} TypeAsepriteFrame An Aseprite JSON frame data.\n     * @property {number} TypeAsepriteFrame.duration The duration.\n     * @property {string} TypeAsepriteFrame.filename The file name.\n     * @property {Object} TypeAsepriteFrame.frame The frame.\n     * @property {number} TypeAsepriteFrame.frame.x The x position of the frame.\n     * @property {number} TypeAsepriteFrame.frame.y The y position of the frame.\n     * @property {number} TypeAsepriteFrame.frame.w The width of the frame.\n     * @property {number} TypeAsepriteFrame.frame.h The height of the frame.\n     * @property {boolean} TypeAsepriteFrame.rotated The rotated status.\n     * @property {Object} TypeAsepriteFrame.spriteSourceSize The sprite source size.\n     * @property {number} TypeAsepriteFrame.spriteSourceSize.x The x position of the sprite source.\n     * @property {number} TypeAsepriteFrame.spriteSourceSize.y The y position of the sprite source.\n     * @property {number} TypeAsepriteFrame.spriteSourceSize.w The width of the sprite source.\n     * @property {number} TypeAsepriteFrame.spriteSourceSize.h The height of the sprite source.\n     * @property {Object} TypeAsepriteFrame.sourceSize The sprite size.\n     * @property {number} TypeAsepriteFrame.sourceSize.w The width of the source.\n     * @property {number} TypeAsepriteFrame.sourceSize.h The height of the source.\n     * @property {boolean} TypeAsepriteFrame.trimmed The trimmed status.\n     * @protected\n     *\n     * @memberof Aseprite\n     */\n\n    /**\n     * @template {string} TypeGeneric The generic type of the tags.\n     * @typedef {Object} TypeAsepriteMeta An Aseprite JSON meta data.\n     * @property {string} TypeAsepriteMeta.app The app meta data.\n     * @property {string} TypeAsepriteMeta.format The format meta data.\n     * @property {string} TypeAsepriteMeta.image The image meta data.\n     * @property {string} TypeAsepriteMeta.scale The scale meta data.\n     * @property {Object} TypeAsepriteMeta.size The size meta data.\n     * @property {number} TypeAsepriteMeta.size.w The size width meta data.\n     * @property {number} TypeAsepriteMeta.size.h The size height meta data.\n     * @property {string} TypeAsepriteMeta.version The version meta data.\n     * @property {Array<TypeAsepriteFrameTag<TypeGeneric>>} TypeAsepriteMeta.frameTags The Aseprite JSON tags meta data.\n     * @protected\n     *\n     * @memberof Aseprite\n     */\n\n    /**\n     * @template {string} TypeGeneric The generic type of the tags.\n     * @typedef {Object} TypeAsepriteFrameTag An Aseprite JSON tag meta data.\n     * @property {TypeGeneric} TypeAsepriteFrameTag.name The name.\n     * @property {number} TypeAsepriteFrameTag.from The first frame.\n     * @property {number} TypeAsepriteFrameTag.to The last frame.\n     * @property {string} TypeAsepriteFrameTag.direction The animation direction.\n     * @property {string} TypeAsepriteFrameTag.color The color.\n     * @protected\n     *\n     * @memberof Aseprite\n     */\n\n    /**\n     * Stores the sprites and their duration.\n     * @type {Map<Sprite, number>}\n     * @private\n     */\n    $sprites;\n\n    /**\n     * Stores the sprites and their duration by tags.\n     * @type {Map.<TypeGeneric, Map<Sprite, number>>}\n     * @private\n     */\n    $tags;\n\n    /**\n     * Stores the texture source.\n     * @type {string}\n     * @private\n     */\n    $texture;\n\n    /**\n     * Gets the texture source.\n     * @type {string}\n     * @public\n     */\n    get texture() {\n\n        return this.$texture;\n    }\n\n    /**\n     * Creates a new Aseprite module manager.\n     * @param {string} $texture The texture source.\n     * @param {TypeAseprite<TypeGeneric>} $data The Aseprite JSON data.\n     */\n    constructor($texture, $data) {\n\n        this.$texture = $texture;\n\n        this.$sprites = new Map();\n\n        $data.frames.forEach(($frame) => {\n\n            const sprite = new Sprite({\n\n                $frameSource: new AABB(\n\n                    new Vector2($frame.frame.x / $data.meta.size.w, $frame.frame.y / $data.meta.size.h),\n                    new Vector2(($frame.frame.x + $frame.frame.w) / $data.meta.size.w, ($frame.frame.y + $frame.frame.h) / $data.meta.size.h)\n                ),\n                $sizeTarget: new Vector2($frame.frame.w, $frame.frame.h),\n                $texture: $texture\n            });\n\n            this.$sprites.set(sprite, $frame.duration);\n        });\n\n        this.$tags = new Map();\n\n        $data.meta.frameTags.forEach(($tag) => {\n\n            const subset = Array.from(this.$sprites.entries())\n            .slice($tag.from, $tag.to + 1);\n\n            this.$tags.set($tag.name, new Map(subset));\n        });\n    }\n\n    /**\n     * Gets the sprites and their duration for the given tag.\n     * @param {TypeGeneric} $tag The given tag.\n     * @returns {Map<Sprite, number>}\n     * @public\n     */\n    getSprites($tag) {\n\n        if (this.$tags.size === 0) {\n\n            return new Map();\n        }\n\n        if (this.$tags.has($tag) === false) {\n\n            const first = Array.from(this.$tags.keys())[0];\n\n            return this.$tags.get(first);\n        }\n\n        return this.$tags.get($tag);\n    }\n}\n\nexport {\n\n    Aseprite\n};\n\nexport default Aseprite;\n","import {Sprite, Timeline, TimelineKeyframe} from '@theatrejs/theatrejs';\n\nimport {Aseprite} from './index.js';\n\n/**\n * Creates Aseprite spritesheets.\n * @template {string} TypeGeneric The generic type of the tags.\n *\n * @example\n *\n * const spritesheet = new Spritesheet(aseprite);\n * spritesheet.animate(tag, loop);\n * spritesheet.tick(timetick);\n *\n * const sprite = spritesheet.sprite;\n */\nclass Spritesheet {\n\n    /**\n     * Stores the Aseprite module manager.\n     * @type {Aseprite<TypeGeneric>}\n     * @private\n     */\n    $aseprite;\n\n    /**\n     * Stores the current sprite.\n     * @type {Sprite}\n     * @private\n     */\n    $sprite;\n\n    /**\n     * Stores the timeline.\n     * @type {Timeline}\n     * @private\n     */\n    $timeline;\n\n    /**\n     * Gets the current sprite.\n     * @type {Sprite}\n     * @public\n     */\n    get sprite() {\n\n        return this.$sprite;\n    }\n\n    /**\n     * Creates a new Aseprite spritesheet.\n     * @param {Aseprite<TypeGeneric>} $aseprite The Aseprite module manager.\n     */\n    constructor($aseprite) {\n\n        this.$aseprite = $aseprite;\n\n        this.$timeline = new Timeline();\n    }\n\n    /**\n     * Animates an Aseprite tag.\n     * @param {TypeGeneric} $tag The given tag.\n     * @param {boolean} [$loop] The loop status.\n     * @public\n     */\n    animate($tag, $loop = true) {\n\n        const sprites = this.$aseprite.getSprites($tag);\n\n        if (sprites.size === 0) {\n\n            return;\n        }\n\n        let timecode = 0;\n\n        const keyframes = Array.from(sprites.entries()).map(([$sprite, $duration]) => {\n\n            const timelinekeyframe = new TimelineKeyframe({\n\n                $onEnter: () => {\n\n                    this.$sprite = $sprite;\n                },\n                $timecode: timecode\n            });\n\n            timecode += $duration;\n\n            return timelinekeyframe;\n        });\n\n        if ($loop === true) {\n\n            keyframes.push(new TimelineKeyframe({\n\n                $onEnter: ($timeline) => {\n\n                    $timeline.seekTimecode(0);\n                },\n                $timecode: timecode\n            }));\n        }\n\n        this.$timeline = new Timeline(keyframes);\n        this.$timeline.seekTimecode(0);\n    }\n\n    /**\n     * Updates the spritesheet by one tick update.\n     * @param {number} $timetick The tick duration (in ms).\n     * @public\n     */\n    tick($timetick) {\n\n        this.$timeline.tick($timetick);\n    }\n}\n\nexport {\n\n    Spritesheet\n};\n\nexport default Spritesheet;\n","import {Aseprite} from '@theatrejs/plugin-aseprite';import data from './gamepad-xbox.json';import texture from './gamepad-xbox.png';export default new Aseprite(texture, data);","import {Aseprite} from '@theatrejs/plugin-aseprite';import data from './gamepad-xbox-inputs.json';import texture from './gamepad-xbox-inputs.png';export default new Aseprite(texture, data);","import {Actor, EVENT_CODES, FACTORIES, Vector2} from '@theatrejs/theatrejs';\nimport * as PLUGIN_ASEPRITE from '@theatrejs/plugin-aseprite';\n\nimport asepriteGamepadXbox from './spritesheets/gamepad-xbox/gamepad-xbox.aseprite';\nimport asepriteGamepadXboxInputs from './spritesheets/gamepad-xbox-inputs/gamepad-xbox-inputs.aseprite';\n\n/**\n * @extends {Actor<undefined, undefined>}\n */\nclass ActorOverlayGamepad extends FACTORIES.ActorWithPreloadables([\n\n    PLUGIN_ASEPRITE.FACTORIES.PreloadableAseprite(asepriteGamepadXbox),\n    PLUGIN_ASEPRITE.FACTORIES.PreloadableAseprite(asepriteGamepadXboxInputs)\n]) {\n\n    /**\n     * @typedef {('idle' | 'disconnected')} TypeTagAsepriteGamepad A gamepad Aseprite tag.\n     */\n\n    /**\n     * @typedef {('a-activated' | 'a-idle' | 'b-activated' | 'b-idle' | 'x-activated' | 'x-idle' | 'y-activated' | 'y-idle' | 'lb-activated' | 'lb-idle' | 'rb-activated' | 'rb-idle' | 'lt-activated' | 'lt-idle' | 'rt-activated' | 'rt-idle' | 'back-activated' | 'back-idle' | 'start-activated' | 'start-idle' | 'lsb-activated' | 'lsb-idle' | 'rsb-activated' | 'rsb-idle' | 'up-activated' | 'up-idle' | 'down-activated' | 'down-idle' | 'left-activated' | 'left-idle' | 'right-activated' | 'right-idle' | 'xbox-activated' | 'xbox-idle')} TypeTagAsepriteGamepadInput A gamepad input Aseprite tag.\n     */\n\n    /**\n     * Stores the input actors.\n     * @type {Array<Actor>}\n     * @private\n     */\n    $actorsInput;\n\n    /**\n     * Stores the connected status of the gamepad.\n     * @type {boolean}\n     * @private\n     */\n    $connected;\n\n    /**\n     * Stores the gamepad Aseprite spritesheet.\n     * @type {PLUGIN_ASEPRITE.Spritesheet<TypeTagAsepriteGamepad>}\n     * @private\n     */\n    $spritesheet;\n\n    /**\n     * Triggers the 'connected' action.\n     * @private\n     */\n    $actionConnected() {\n\n        this.$spritesheet.animate('idle');\n\n        this.$connected = true;\n    }\n\n    /**\n     * Triggers the 'disconnected' action.\n     * @private\n     */\n    $actionDisconnected() {\n\n        this.$spritesheet.animate('disconnected');\n\n        this.$connected = false;\n    }\n\n    /**\n     * Creates the button input actors.\n     * @private\n     */\n    $createActorsInputButton() {\n\n        /**\n         * @type {Map<string, Array<TypeTagAsepriteGamepadInput>>}\n         */\n        const mappingInputsButtonRendering = new Map([\n\n            [EVENT_CODES.GAMEPAD_XBOX.A, ['a-activated', 'a-idle']],\n            [EVENT_CODES.GAMEPAD_XBOX.B, ['b-activated', 'b-idle']],\n            [EVENT_CODES.GAMEPAD_XBOX.X, ['x-activated', 'x-idle']],\n            [EVENT_CODES.GAMEPAD_XBOX.Y, ['y-activated', 'y-idle']],\n            [EVENT_CODES.GAMEPAD_XBOX.LB, ['lb-activated', 'lb-idle']],\n            [EVENT_CODES.GAMEPAD_XBOX.RB, ['rb-activated', 'rb-idle']],\n            [EVENT_CODES.GAMEPAD_XBOX.LT, ['lt-activated', 'lt-idle']],\n            [EVENT_CODES.GAMEPAD_XBOX.RT, ['rt-activated', 'rt-idle']],\n            [EVENT_CODES.GAMEPAD_XBOX.BACK, ['back-activated', 'back-idle']],\n            [EVENT_CODES.GAMEPAD_XBOX.START, ['start-activated', 'start-idle']],\n            [EVENT_CODES.GAMEPAD_XBOX.UP, ['up-activated', 'up-idle']],\n            [EVENT_CODES.GAMEPAD_XBOX.DOWN, ['down-activated', 'down-idle']],\n            [EVENT_CODES.GAMEPAD_XBOX.LEFT, ['left-activated', 'left-idle']],\n            [EVENT_CODES.GAMEPAD_XBOX.RIGHT, ['right-activated', 'right-idle']],\n            [EVENT_CODES.GAMEPAD_XBOX.XBOX, ['xbox-activated', 'xbox-idle']]\n        ]);\n\n        Array.from(mappingInputsButtonRendering).forEach(([$input, [$activated, $idle]]) => {\n\n            const ActorInput = /** @type {typeof PLUGIN_ASEPRITE.FACTORIES.ActorWithSpritesheet<TypeTagAsepriteGamepadInput>} **/(PLUGIN_ASEPRITE.FACTORIES.ActorWithSpritesheet)({\n\n                $aseprite: /** @type {PLUGIN_ASEPRITE.Aseprite<TypeTagAsepriteGamepadInput>} **/(asepriteGamepadXboxInputs),\n                $tag: /** @type {TypeTagAsepriteGamepadInput} */((this.engine.getInput($input) === true) ? $activated : $idle)\n            });\n\n            const actor = this.stage.createActor(ActorInput)\n            .setVisible(this.visible)\n            .setZIndex(this.zIndex)\n            .translate(this.translation.clone());\n\n            this.$actorsInput.push(actor);\n        });\n    }\n\n    /**\n     * Creates the left stick input actor.\n     * @private\n     */\n    $createActorsInputStickLeft() {\n\n        const ActorInputStickLeft = /** @type {typeof PLUGIN_ASEPRITE.FACTORIES.ActorWithSpritesheet<TypeTagAsepriteGamepadInput>} **/(PLUGIN_ASEPRITE.FACTORIES.ActorWithSpritesheet)({\n\n            $aseprite: /** @type {PLUGIN_ASEPRITE.Aseprite<TypeTagAsepriteGamepadInput>} **/(asepriteGamepadXboxInputs),\n            $tag: (this.engine.getInput(EVENT_CODES.GAMEPAD_XBOX.LSB) === true) ? 'lsb-activated' : 'lsb-idle'\n        });\n\n        const actorInputStickLeft = this.stage.createActor(ActorInputStickLeft)\n        .setVisible(this.visible)\n        .setZIndex(this.zIndex)\n        .translate(this.translation.clone());\n\n        this.$actorsInput.push(actorInputStickLeft);\n\n        if (this.engine.getInput(EVENT_CODES.GAMEPAD_XBOX.LS_LEFT) === true) {\n\n            actorInputStickLeft.translate(new Vector2(-2, 0));\n        }\n\n        if (this.engine.getInput(EVENT_CODES.GAMEPAD_XBOX.LS_RIGHT) === true) {\n\n            actorInputStickLeft.translate(new Vector2(2, 0));\n        }\n\n        if (this.engine.getInput(EVENT_CODES.GAMEPAD_XBOX.LS_UP) === true) {\n\n            actorInputStickLeft.translate(new Vector2(0, 2));\n        }\n\n        if (this.engine.getInput(EVENT_CODES.GAMEPAD_XBOX.LS_DOWN) === true) {\n\n            actorInputStickLeft.translate(new Vector2(0, -2));\n        }\n    }\n\n    /**\n     * Creates the right stick input actor.\n     * @private\n     */\n    $createActorsInputStickRight() {\n\n        const ActorInputStickRight = /** @type {typeof PLUGIN_ASEPRITE.FACTORIES.ActorWithSpritesheet<TypeTagAsepriteGamepadInput>} **/(PLUGIN_ASEPRITE.FACTORIES.ActorWithSpritesheet)({\n\n            $aseprite: /** @type {PLUGIN_ASEPRITE.Aseprite<TypeTagAsepriteGamepadInput>} **/(asepriteGamepadXboxInputs),\n            $tag: (this.engine.getInput(EVENT_CODES.GAMEPAD_XBOX.RSB) === true) ? 'rsb-activated' : 'rsb-idle'\n        });\n\n        const actorInputStickRight = this.stage.createActor(ActorInputStickRight)\n        .setVisible(this.visible)\n        .setZIndex(this.zIndex)\n        .translate(this.translation.clone());\n\n        this.$actorsInput.push(actorInputStickRight);\n\n        if (this.engine.getInput(EVENT_CODES.GAMEPAD_XBOX.RS_LEFT) === true) {\n\n            actorInputStickRight.translate(new Vector2(-2, 0));\n        }\n\n        if (this.engine.getInput(EVENT_CODES.GAMEPAD_XBOX.RS_RIGHT) === true) {\n\n            actorInputStickRight.translate(new Vector2(2, 0));\n        }\n\n        if (this.engine.getInput(EVENT_CODES.GAMEPAD_XBOX.RS_UP) === true) {\n\n            actorInputStickRight.translate(new Vector2(0, 2));\n        }\n\n        if (this.engine.getInput(EVENT_CODES.GAMEPAD_XBOX.RS_DOWN) === true) {\n\n            actorInputStickRight.translate(new Vector2(0, -2));\n        }\n    }\n\n    /**\n     * Removes the input actors.\n     * @private\n     */\n    $removeActorsInputs() {\n\n        [...this.$actorsInput].forEach(($actor) => {\n\n            this.stage.removeActor($actor);\n        });\n    }\n\n    /**\n     * @type {Actor['onBeforeRemove']}\n     */\n    onBeforeRemove() {\n\n        [...this.$actorsInput].forEach(($actor) => {\n\n            this.stage.removeActor($actor);\n        });\n    }\n\n    /**\n     * @type {Actor['onCreate']}\n     */\n    onCreate() {\n\n        this.$spritesheet = new PLUGIN_ASEPRITE.Spritesheet(/** @type {PLUGIN_ASEPRITE.Aseprite<TypeTagAsepriteGamepad>} **/(asepriteGamepadXbox));\n\n        this.$actorsInput = [];\n        this.$connected = false;\n\n        this.$actionDisconnected();\n    }\n\n    /**\n     * @type {Actor['onSetVisible']}\n     */\n    onSetVisible($visible) {\n\n        [...this.$actorsInput].forEach(($actor) => {\n\n            $actor.setVisible($visible);\n        });\n    }\n\n    /**\n     * @type {Actor['onSetZIndex']}\n     */\n    onSetZIndex($zIndex) {\n\n        [...this.$actorsInput].forEach(($actor) => {\n\n            $actor.setZIndex($zIndex);\n        });\n    }\n\n    /**\n     * @type {Actor['onTick']}\n     */\n    onTick($timetick) {\n\n        this.$removeActorsInputs();\n\n        if (this.engine.getInput(EVENT_CODES.GAMEPAD_XBOX.CONNECTED) === true) {\n\n            this.$actionConnected();\n        }\n\n        else if (this.engine.getInput(EVENT_CODES.GAMEPAD_XBOX.DISCONNECTED) === true) {\n\n            this.$actionDisconnected();\n        }\n\n        if (this.$connected === true) {\n\n            this.$createActorsInputButton();\n            this.$createActorsInputStickLeft();\n            this.$createActorsInputStickRight();\n        }\n\n        this.$spritesheet.tick($timetick);\n\n        if (this.sprite !== this.$spritesheet.sprite) {\n\n            this.setSprite(this.$spritesheet.sprite);\n        }\n    }\n\n    /**\n     * @type {Actor['onTranslate']}\n     */\n    onTranslate($translation) {\n\n        [...this.$actorsInput].forEach(($actor) => {\n\n            $actor.translate($translation);\n        });\n    }\n}\n\nexport default ActorOverlayGamepad;\n","import {FACTORIES, Stage} from '@theatrejs/theatrejs';\n\nimport {getColor} from 'states/color.state.js';\nimport {getResolution} from 'states/resolution.state.js';\n\nimport ActorOverlayGamepad from './actors/overlay-gamepad/overlay-gamepad.actor.js';\n\nclass StageOverlayGamepad extends FACTORIES.StageWithPreloadables([\n\n    ActorOverlayGamepad\n]) {\n\n    /**\n     * @type {Stage['onCreate']}\n     */\n    onCreate() {\n\n        this.engine.setColor(getColor());\n        this.engine.setResolution(getResolution());\n\n        this.createActor(ActorOverlayGamepad);\n    }\n}\n\nexport default StageOverlayGamepad;\n","import {Stage, State} from '@theatrejs/theatrejs';\n\nimport StageOverlayGamepad from 'stages/overlay-gamepad/overlay-gamepad.stage.js';\n\n/**\n * The state manager of the stage.\n * @type {State<typeof Stage>}\n * @constant\n */\nconst stateStage = new State(StageOverlayGamepad);\n\n/**\n * Gets the stage.\n * @returns {typeof Stage}\n */\nfunction getStage() {\n\n    return stateStage.getState();\n}\n\nexport {\n\n    stateStage,\n\n    getStage\n};\n","/**\n * @module COLLIDER_TYPES\n */\n\n/**\n * The 'dynamic' collider type.\n * @type {'DYNAMIC'}\n * @constant\n *\n * @memberof module:COLLIDER_TYPES\n */\nconst DYNAMIC = 'DYNAMIC';\n\n/**\n * The 'kinetic' collider type.\n * @type {'KINETIC'}\n * @constant\n *\n * @memberof module:COLLIDER_TYPES\n */\nconst KINETIC = 'KINETIC';\n\n/**\n * The 'static' collider type.\n * @type {'STATIC'}\n * @constant\n *\n * @memberof module:COLLIDER_TYPES\n */\nconst STATIC = 'STATIC';\n\nexport {\n\n    DYNAMIC,\n    KINETIC,\n    STATIC\n};\n","/**\n * @module EVENT_CODES/GAMEPADS/STANDARD\n */\n\n/**\n * The STANDARD gamepad 'CLUSTER_RIGHT_BUTTON_BOTTOM' event code.\n * @type {'ClusterRightButtonBottom'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst CLUSTER_RIGHT_BUTTON_BOTTOM = 'ClusterRightButtonBottom';\n\n/**\n * The STANDARD gamepad 'CLUSTER_RIGHT_BUTTON_RIGHT' event code.\n * @type {'ClusterRightButtonRight'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst CLUSTER_RIGHT_BUTTON_RIGHT = 'ClusterRightButtonRight';\n\n/**\n * The STANDARD gamepad 'CLUSTER_RIGHT_BUTTON_LEFT' event code.\n * @type {'ClusterRightButtonLeft'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst CLUSTER_RIGHT_BUTTON_LEFT = 'ClusterRightButtonLeft';\n\n/**\n * The STANDARD gamepad 'CLUSTER_RIGHT_BUTTON_TOP' event code.\n * @type {'ClusterRightButtonTop'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst CLUSTER_RIGHT_BUTTON_TOP = 'ClusterRightButtonTop';\n\n/**\n * The STANDARD gamepad 'CLUSTER_FRONT_BUTTON_TOP_LEFT' event code.\n * @type {'ClusterFrontButtonTopLeft'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst CLUSTER_FRONT_BUTTON_TOP_LEFT = 'ClusterFrontButtonTopLeft';\n\n/**\n * The STANDARD gamepad 'CLUSTER_FRONT_BUTTON_TOP_RIGHT' event code.\n * @type {'ClusterFrontButtonTopRight'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst CLUSTER_FRONT_BUTTON_TOP_RIGHT = 'ClusterFrontButtonTopRight';\n\n/**\n * The STANDARD gamepad 'CLUSTER_FRONT_BUTTON_BOTTOM_LEFT' event code.\n * @type {'ClusterFrontButtonBottomLeft'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst CLUSTER_FRONT_BUTTON_BOTTOM_LEFT = 'ClusterFrontButtonBottomLeft';\n\n/**\n * The STANDARD gamepad 'CLUSTER_FRONT_BUTTON_BOTTOM_RIGHT' event code.\n * @type {'ClusterFrontButtonBottomRight'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst CLUSTER_FRONT_BUTTON_BOTTOM_RIGHT = 'ClusterFrontButtonBottomRight';\n\n/**\n * The STANDARD gamepad 'CLUSTER_CENTER_BUTTON_LEFT' event code.\n * @type {'ClusterCenterButtonLeft'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst CLUSTER_CENTER_BUTTON_LEFT = 'ClusterCenterButtonLeft';\n\n/**\n * The STANDARD gamepad 'CLUSTER_CENTER_BUTTON_RIGHT' event code.\n * @type {'ClusterCenterButtonRight'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst CLUSTER_CENTER_BUTTON_RIGHT = 'ClusterCenterButtonRight';\n\n/**\n * The STANDARD gamepad 'STICK_LEFT_BUTTON' event code.\n * @type {'StickLeftButton'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst STICK_LEFT_BUTTON = 'StickLeftButton';\n\n/**\n * The STANDARD gamepad 'STICK_RIGHT_BUTTON' event code.\n * @type {'StickRightButton'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst STICK_RIGHT_BUTTON = 'StickRightButton';\n\n/**\n * The STANDARD gamepad 'CLUSTER_LEFT_BUTTON_TOP' event code.\n * @type {'ClusterLeftButtonTop'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst CLUSTER_LEFT_BUTTON_TOP = 'ClusterLeftButtonTop';\n\n/**\n * The STANDARD gamepad 'CLUSTER_LEFT_BUTTON_BOTTOM' event code.\n * @type {'ClusterLeftButtonBottom'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst CLUSTER_LEFT_BUTTON_BOTTOM = 'ClusterLeftButtonBottom';\n\n/**\n * The STANDARD gamepad 'CLUSTER_LEFT_BUTTON_LEFT' event code.\n * @type {'ClusterLeftButtonLeft'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst CLUSTER_LEFT_BUTTON_LEFT = 'ClusterLeftButtonLeft';\n\n/**\n * The STANDARD gamepad 'CLUSTER_LEFT_BUTTON_RIGHT' event code.\n * @type {'ClusterLeftButtonRight'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst CLUSTER_LEFT_BUTTON_RIGHT = 'ClusterLeftButtonRight';\n\n/**\n * The STANDARD gamepad 'CLUSTER_CENTER_BUTTON_CENTER' event code.\n * @type {'ClusterCenterButtonCenter'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst CLUSTER_CENTER_BUTTON_CENTER = 'ClusterCenterButtonCenter';\n\n/**\n * The STANDARD gamepad 'STICK_LEFT_LEFT' event code.\n * @type {'StickLeftLeft'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst STICK_LEFT_LEFT = 'StickLeftLeft';\n\n/**\n * The STANDARD gamepad 'STICK_LEFT_RIGHT' event code.\n * @type {'StickLeftRight'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst STICK_LEFT_RIGHT = 'StickLeftRight';\n\n/**\n * The STANDARD gamepad 'STICK_LEFT_UP' event code.\n * @type {'StickLeftUp'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst STICK_LEFT_UP = 'StickLeftUp';\n\n/**\n * The STANDARD gamepad 'STICK_LEFT_DOWN' event code.\n * @type {'StickLeftDown'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst STICK_LEFT_DOWN = 'StickLeftDown';\n\n/**\n * The STANDARD gamepad 'STICK_RIGHT_LEFT' event code.\n * @type {'StickRightLeft'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst STICK_RIGHT_LEFT = 'StickRightLeft';\n\n/**\n * The STANDARD gamepad 'STICK_RIGHT_RIGHT' event code.\n * @type {'StickRightRight'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst STICK_RIGHT_RIGHT = 'StickRightRight';\n\n/**\n * The STANDARD gamepad 'STICK_RIGHT_UP' event code.\n * @type {'StickRightUp'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst STICK_RIGHT_UP = 'StickRightUp';\n\n/**\n * The STANDARD gamepad 'STICK_RIGHT_DOWN' event code.\n * @type {'StickRightDown'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst STICK_RIGHT_DOWN = 'StickRightDown';\n\n/**\n * The STANDARD gamepad 'CONNECTED' event code.\n * @type {'Connected'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst CONNECTED = 'Connected';\n\n/**\n * The STANDARD gamepad 'DISCONNECTED' event code.\n * @type {'Disconnected'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst DISCONNECTED = 'Disconnected';\n\n/**\n * The STANDARD gamepad 'VIBRATE_END' event code.\n * @type {'VibrateEnd'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst VIBRATE_END = 'VibrateEnd';\n\n/**\n * The STANDARD gamepad 'VIBRATE_START' event code.\n * @type {'VibrateStart'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/STANDARD\n */\nconst VIBRATE_START = 'VibrateStart';\n\nexport {\n\n    CLUSTER_RIGHT_BUTTON_BOTTOM,\n    CLUSTER_RIGHT_BUTTON_RIGHT,\n    CLUSTER_RIGHT_BUTTON_LEFT,\n    CLUSTER_RIGHT_BUTTON_TOP,\n\n    CLUSTER_FRONT_BUTTON_TOP_LEFT,\n    CLUSTER_FRONT_BUTTON_TOP_RIGHT,\n    CLUSTER_FRONT_BUTTON_BOTTOM_LEFT,\n    CLUSTER_FRONT_BUTTON_BOTTOM_RIGHT,\n\n    CLUSTER_CENTER_BUTTON_LEFT,\n    CLUSTER_CENTER_BUTTON_RIGHT,\n\n    STICK_LEFT_BUTTON,\n    STICK_RIGHT_BUTTON,\n\n    CLUSTER_LEFT_BUTTON_TOP,\n    CLUSTER_LEFT_BUTTON_BOTTOM,\n    CLUSTER_LEFT_BUTTON_LEFT,\n    CLUSTER_LEFT_BUTTON_RIGHT,\n\n    CLUSTER_CENTER_BUTTON_CENTER,\n\n    STICK_LEFT_LEFT,\n    STICK_LEFT_RIGHT,\n    STICK_LEFT_UP,\n    STICK_LEFT_DOWN,\n    STICK_RIGHT_LEFT,\n    STICK_RIGHT_RIGHT,\n    STICK_RIGHT_UP,\n    STICK_RIGHT_DOWN,\n\n    CONNECTED,\n    DISCONNECTED,\n    VIBRATE_END,\n    VIBRATE_START\n};\n","/**\n * @module EVENT_CODES/GAMEPADS/XBOX\n */\n\n/**\n * The XBOX gamepad 'A' event code.\n * @type {'ClusterRightButtonBottom'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst A = 'ClusterRightButtonBottom';\n\n/**\n * The XBOX gamepad 'B' event code.\n * @type {'ClusterRightButtonRight'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst B = 'ClusterRightButtonRight';\n\n/**\n * The XBOX gamepad 'X' event code.\n * @type {'ClusterRightButtonLeft'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst X = 'ClusterRightButtonLeft';\n\n/**\n * The XBOX gamepad 'Y' event code.\n * @type {'ClusterRightButtonTop'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst Y = 'ClusterRightButtonTop';\n\n/**\n * The XBOX gamepad 'LB' event code.\n * @type {'ClusterFrontButtonTopLeft'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst LB = 'ClusterFrontButtonTopLeft';\n\n/**\n * The XBOX gamepad 'RB' event code.\n * @type {'ClusterFrontButtonTopRight'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst RB = 'ClusterFrontButtonTopRight';\n\n/**\n * The XBOX gamepad 'LT' event code.\n * @type {'ClusterFrontButtonBottomLeft'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst LT = 'ClusterFrontButtonBottomLeft';\n\n/**\n * The XBOX gamepad 'RT' event code.\n * @type {'ClusterFrontButtonBottomRight'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst RT = 'ClusterFrontButtonBottomRight';\n\n/**\n * The XBOX gamepad 'BACK' event code.\n * @type {'ClusterCenterButtonLeft'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst BACK = 'ClusterCenterButtonLeft';\n\n/**\n * The XBOX gamepad 'START' event code.\n * @type {'ClusterCenterButtonRight'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst START = 'ClusterCenterButtonRight';\n\n/**\n * The XBOX gamepad 'LSB' event code.\n * @type {'StickLeftButton'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst LSB = 'StickLeftButton';\n\n/**\n * The XBOX gamepad 'RSB' event code.\n * @type {'StickRightButton'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst RSB = 'StickRightButton';\n\n/**\n * The XBOX gamepad 'UP' event code.\n * @type {'ClusterLeftButtonTop'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst UP = 'ClusterLeftButtonTop';\n\n/**\n * The XBOX gamepad 'DOWN' event code.\n * @type {'ClusterLeftButtonBottom'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst DOWN = 'ClusterLeftButtonBottom';\n\n/**\n * The XBOX gamepad 'LEFT' event code.\n * @type {'ClusterLeftButtonLeft'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst LEFT = 'ClusterLeftButtonLeft';\n\n/**\n * The XBOX gamepad 'RIGHT' event code.\n * @type {'ClusterLeftButtonRight'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst RIGHT = 'ClusterLeftButtonRight';\n\n/**\n * The XBOX gamepad 'XBOX' event code.\n * @type {'ClusterCenterButtonCenter'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst XBOX = 'ClusterCenterButtonCenter';\n\n/**\n * The XBOX gamepad 'LS_LEFT' event code.\n * @type {'StickLeftLeft'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst LS_LEFT = 'StickLeftLeft';\n\n/**\n * The XBOX gamepad 'LS_RIGHT' event code.\n * @type {'StickLeftRight'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst LS_RIGHT = 'StickLeftRight';\n\n/**\n * The XBOX gamepad 'LS_UP' event code.\n * @type {'StickLeftUp'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst LS_UP = 'StickLeftUp';\n\n/**\n * The XBOX gamepad 'LS_DOWN' event code.\n * @type {'StickLeftDown'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst LS_DOWN = 'StickLeftDown';\n\n/**\n * The XBOX gamepad 'RS_LEFT' event code.\n * @type {'StickRightLeft'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst RS_LEFT = 'StickRightLeft';\n\n/**\n * The XBOX gamepad 'RS_RIGHT' event code.\n * @type {'StickRightRight'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst RS_RIGHT = 'StickRightRight';\n\n/**\n * The XBOX gamepad 'RS_UP' event code.\n * @type {'StickRightUp'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst RS_UP = 'StickRightUp';\n\n/**\n * The XBOX gamepad 'RS_DOWN' event code.\n * @type {'StickRightDown'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst RS_DOWN = 'StickRightDown';\n\n/**\n * The XBOX gamepad 'CONNECTED' event code.\n * @type {'Connected'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst CONNECTED = 'Connected';\n\n/**\n * The XBOX gamepad 'DISCONNECTED' event code.\n * @type {'Disconnected'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst DISCONNECTED = 'Disconnected';\n\n/**\n * The XBOX gamepad 'VIBRATE_END' event code.\n * @type {'VibrateEnd'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst VIBRATE_END = 'VibrateEnd';\n\n/**\n * The XBOX gamepad 'VIBRATE_START' event code.\n * @type {'VibrateStart'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GAMEPADS/XBOX\n */\nconst VIBRATE_START = 'VibrateStart';\n\nexport {\n\n    A,\n    B,\n    X,\n    Y,\n\n    LB,\n    RB,\n    LT,\n    RT,\n\n    BACK,\n    START,\n\n    LSB,\n    RSB,\n\n    UP,\n    DOWN,\n    LEFT,\n    RIGHT,\n\n    XBOX,\n\n    LS_LEFT,\n    LS_RIGHT,\n    LS_UP,\n    LS_DOWN,\n    RS_LEFT,\n    RS_RIGHT,\n    RS_UP,\n    RS_DOWN,\n\n    CONNECTED,\n    DISCONNECTED,\n    VIBRATE_END,\n    VIBRATE_START\n};\n","/**\n * @module EVENT_CODES/GRAVITY\n */\n\n/**\n * The gravity 'DIRECTION_X_NEGATIVE' event code.\n * @type {'DirectionXNegative'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GRAVITY\n */\nconst DIRECTION_X_NEGATIVE = 'DirectionXNegative';\n\n/**\n * The gravity 'DIRECTION_X_POSITIVE' event code.\n * @type {'DirectionXPositive'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GRAVITY\n */\nconst DIRECTION_X_POSITIVE = 'DirectionXPositive';\n\n/**\n * The gravity 'DIRECTION_Y_NEGATIVE' event code.\n * @type {'DirectionYNegative'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GRAVITY\n */\nconst DIRECTION_Y_NEGATIVE = 'DirectionYNegative';\n\n/**\n * The gravity 'DIRECTION_Y_POSITIVE' event code.\n * @type {'DirectionYPositive'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GRAVITY\n */\nconst DIRECTION_Y_POSITIVE = 'DirectionYPositive';\n\n/**\n * The gravity 'DIRECTION_Z_NEGATIVE' event code.\n * @type {'DirectionZNegative'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GRAVITY\n */\nconst DIRECTION_Z_NEGATIVE = 'DirectionZNegative';\n\n/**\n * The gravity 'DIRECTION_Z_POSITIVE' event code.\n * @type {'DirectionZPositive'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GRAVITY\n */\nconst DIRECTION_Z_POSITIVE = 'DirectionZPositive';\n\nexport {\n\n    DIRECTION_X_NEGATIVE,\n    DIRECTION_X_POSITIVE,\n    DIRECTION_Y_NEGATIVE,\n    DIRECTION_Y_POSITIVE,\n    DIRECTION_Z_NEGATIVE,\n    DIRECTION_Z_POSITIVE\n};\n","/**\n * @module EVENT_CODES/GYROSCOPE\n */\n\n/**\n * The gyroscope 'ROTATION_X_NEGATIVE' event code.\n * @type {'RotationXNegative'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GYROSCOPE\n */\nconst ROTATION_X_NEGATIVE = 'RotationXNegative';\n\n/**\n * The gyroscope 'ROTATION_X_POSITIVE' event code.\n * @type {'RotationXPositive'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GYROSCOPE\n */\nconst ROTATION_X_POSITIVE = 'RotationXPositive';\n\n/**\n * The gyroscope 'ROTATION_Y_NEGATIVE' event code.\n * @type {'RotationYNegative'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GYROSCOPE\n */\nconst ROTATION_Y_NEGATIVE = 'RotationYNegative';\n\n/**\n * The gyroscope 'ROTATION_Y_POSITIVE' event code.\n * @type {'RotationYPositive'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GYROSCOPE\n */\nconst ROTATION_Y_POSITIVE = 'RotationYPositive';\n\n/**\n * The gyroscope 'ROTATION_Z_NEGATIVE' event code.\n * @type {'RotationZNegative'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GYROSCOPE\n */\nconst ROTATION_Z_NEGATIVE = 'RotationZNegative';\n\n/**\n * The gyroscope 'ROTATION_Z_POSITIVE' event code.\n * @type {'RotationZPositive'}\n * @constant\n *\n * @memberof module:EVENT_CODES/GYROSCOPE\n */\nconst ROTATION_Z_POSITIVE = 'RotationZPositive';\n\nexport {\n\n    ROTATION_X_NEGATIVE,\n    ROTATION_X_POSITIVE,\n    ROTATION_Y_NEGATIVE,\n    ROTATION_Y_POSITIVE,\n    ROTATION_Z_NEGATIVE,\n    ROTATION_Z_POSITIVE\n};\n","/**\n * @module EVENT_TYPES/GAMEPAD\n */\n\n/**\n * The gamepad 'GAMEPAD_ANALOG' event type.\n * @type {'gamepadanalog'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/GAMEPAD\n */\nconst GAMEPAD_ANALOG = 'gamepadanalog';\n\n/**\n * The gamepad 'GAMEPAD_CONNECT' event type.\n * @type {'gamepadconnect'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/GAMEPAD\n */\nconst GAMEPAD_CONNECT = 'gamepadconnect';\n\n/**\n * The gamepad 'GAMEPAD_DOWN' event type.\n * @type {'gamepaddown'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/GAMEPAD\n */\nconst GAMEPAD_DOWN = 'gamepaddown';\n\n/**\n * The gamepad 'GAMEPAD_UP' event type.\n * @type {'gamepadup'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/GAMEPAD\n */\nconst GAMEPAD_UP = 'gamepadup';\n\n/**\n * The gamepad 'GAMEPAD_VIBRATE' event type.\n * @type {'gamepadvibrate'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/GAMEPAD\n */\nconst GAMEPAD_VIBRATE = 'gamepadvibrate';\n\nexport {\n\n    GAMEPAD_ANALOG,\n    GAMEPAD_CONNECT,\n    GAMEPAD_DOWN,\n    GAMEPAD_UP,\n    GAMEPAD_VIBRATE\n};\n","/**\n * @module EVENT_TYPES/GRAVITY\n */\n\n/**\n * The gravity 'GRAVITY_ANALOG' event type.\n * @type {'gravityanalog'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/GRAVITY\n */\nconst GRAVITY_ANALOG = 'gravityanalog';\n\n/**\n * The gravity 'GRAVITY_DOWN' event type.\n * @type {'gravitydown'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/GRAVITY\n */\nconst GRAVITY_DOWN = 'gravitydown';\n\n/**\n * The gravity 'GRAVITY_UP' event type.\n * @type {'gravityup'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/GRAVITY\n */\nconst GRAVITY_UP = 'gravityup';\n\nexport {\n\n    GRAVITY_ANALOG,\n    GRAVITY_DOWN,\n    GRAVITY_UP\n};\n","/**\n * @module EVENT_TYPES/GYROSCOPE\n */\n\n/**\n * The gyroscope 'GYROSCOPE_ANALOG' event type.\n * @type {'gyroscopeanalog'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/GYROSCOPE\n */\nconst GYROSCOPE_ANALOG = 'gyroscopeanalog';\n\n/**\n * The gyroscope 'GYROSCOPE_DOWN' event type.\n * @type {'gyroscopedown'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/GYROSCOPE\n */\nconst GYROSCOPE_DOWN = 'gyroscopedown';\n\n/**\n * The gyroscope 'GYROSCOPE_UP' event type.\n * @type {'gyroscopeup'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/GYROSCOPE\n */\nconst GYROSCOPE_UP = 'gyroscopeup';\n\nexport {\n\n    GYROSCOPE_ANALOG,\n    GYROSCOPE_DOWN,\n    GYROSCOPE_UP\n};\n","/**\n * @module EVENT_TYPES/KEYBOARD\n */\n\n/**\n * The keyboard 'KEY_DOWN' event type.\n * @type {'keydown'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/KEYBOARD\n */\nconst KEY_DOWN = 'keydown';\n\n/**\n * The keyboard 'KEY_UP' event type.\n * @type {'keyup'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/KEYBOARD\n */\nconst KEY_UP = 'keyup';\n\nexport {\n\n    KEY_DOWN,\n    KEY_UP\n};\n","/**\n * @module EVENT_TYPES/NATIVE\n */\n\n/**\n * The native 'BEFORE_UNLOAD' event type.\n * @type {'beforeunload'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/NATIVE\n */\nconst BEFORE_UNLOAD = 'beforeunload';\n\n/**\n * The native 'BLUR' event type.\n * @type {'blur'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/NATIVE\n */\nconst BLUR = 'blur';\n\n/**\n * The native 'CLICK' event type.\n * @type {'click'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/NATIVE\n */\nconst CLICK = 'click';\n\n/**\n * The native 'CONTEXT_MENU' event type.\n * @type {'contextmenu'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/NATIVE\n */\nconst CONTEXT_MENU = 'contextmenu';\n\n/**\n * The native 'GAMEPAD_CONNECTED' event type.\n * @type {'gamepadconnected'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/NATIVE\n */\nconst GAMEPAD_CONNECTED = 'gamepadconnected';\n\n/**\n * The native 'GAMEPAD_DISCONNECTED' event type.\n * @type {'gamepaddisconnected'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/NATIVE\n */\nconst GAMEPAD_DISCONNECTED = 'gamepaddisconnected';\n\n/**\n * The native 'READING' event type.\n * @type {'reading'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/NATIVE\n */\nconst READING = 'reading';\n\nexport {\n\n    BEFORE_UNLOAD,\n    BLUR,\n    CLICK,\n    CONTEXT_MENU,\n    GAMEPAD_CONNECTED,\n    GAMEPAD_DISCONNECTED,\n    READING\n};\n","/**\n * @module EVENT_TYPES/POINTER\n */\n\n/**\n * The pointer 'POINTER_ANALOG' event type.\n * @type {'pointeranalog'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/POINTER\n */\nconst POINTER_ANALOG = 'pointeranalog';\n\n/**\n * The pointer 'POINTER_DOWN' event type.\n * @type {'pointerdown'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/POINTER\n */\nconst POINTER_DOWN = 'pointerdown';\n\n/**\n * The pointer 'POINTER_LEAVE' event type.\n * @type {'pointerleave'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/POINTER\n */\nconst POINTER_LEAVE = 'pointerleave';\n\n/**\n * The pointer 'POINTER_MOVE' event type.\n * @type {'pointermove'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/POINTER\n */\nconst POINTER_MOVE = 'pointermove';\n\n/**\n * The pointer 'POINTER_UP' event type.\n * @type {'pointerup'}\n * @constant\n *\n * @memberof module:EVENT_TYPES/POINTER\n */\nconst POINTER_UP = 'pointerup';\n\nexport {\n\n    POINTER_ANALOG,\n    POINTER_DOWN,\n    POINTER_LEAVE,\n    POINTER_MOVE,\n    POINTER_UP\n};\n","/**\n * @module MATHEMATICS\n */\n\n/**\n * The value to convert an angle from degrees to radians.\n * @type {number}\n * @constant\n *\n * @memberof module:MATHEMATICS\n */\nconst RADIANS = Math.PI / 180;\n\nexport {\n\n    RADIANS\n};\n","/**\n * @module MEDIA_TYPES\n */\n\n/**\n * The 'audio' media type.\n * @type {'audio'}\n * @constant\n *\n * @memberof module:MEDIA_TYPES\n */\nconst AUDIO = 'audio';\n\n/**\n * The 'image' media type.\n * @type {'image'}\n * @constant\n *\n * @memberof module:MEDIA_TYPES\n */\nconst IMAGE = 'image';\n\nexport {\n\n    AUDIO,\n    IMAGE\n};\n","/**\n * @module SHADER_PARAMETER_TYPES\n */\n\n/**\n * The 'ARRAY_BOOLEAN' shader parameter type.\n * @type {'bool[]'}\n * @constant\n *\n * @memberof module:SHADER_PARAMETER_TYPES\n */\nconst ARRAY_BOOLEAN = 'bool[]';\n\n/**\n * The 'ARRAY_FLOAT' shader parameter type.\n * @type {'float[]'}\n * @constant\n *\n * @memberof module:SHADER_PARAMETER_TYPES\n */\nconst ARRAY_FLOAT = 'float[]';\n\n/**\n * The 'ARRAY_INTEGER' shader parameter type.\n * @type {'int[]'}\n * @constant\n *\n * @memberof module:SHADER_PARAMETER_TYPES\n */\nconst ARRAY_INTEGER = 'int[]';\n\n/**\n * The 'ARRAY_MATRIX_4' shader parameter type.\n * @type {'mat4[]'}\n * @constant\n *\n * @memberof module:SHADER_PARAMETER_TYPES\n */\nconst ARRAY_MATRIX_4 = 'mat4[]';\n\n/**\n * The 'ARRAY_VECTOR_2' shader parameter type.\n * @type {'vec2[]'}\n * @constant\n *\n * @memberof module:SHADER_PARAMETER_TYPES\n */\nconst ARRAY_VECTOR_2 = 'vec2[]';\n\n/**\n * The 'ARRAY_VECTOR_3' shader parameter type.\n * @type {'vec3[]'}\n * @constant\n *\n * @memberof module:SHADER_PARAMETER_TYPES\n */\nconst ARRAY_VECTOR_3 = 'vec3[]';\n\n/**\n * The 'BOOLEAN' shader parameter type.\n * @type {'bool'}\n * @constant\n *\n * @memberof module:SHADER_PARAMETER_TYPES\n */\nconst BOOLEAN = 'bool';\n\n/**\n * The 'FLOAT' shader parameter type.\n * @type {'float'}\n * @constant\n *\n * @memberof module:SHADER_PARAMETER_TYPES\n */\nconst FLOAT = 'float';\n\n/**\n * The 'INTEGER' shader parameter type.\n * @type {'int'}\n * @constant\n *\n * @memberof module:SHADER_PARAMETER_TYPES\n */\nconst INTEGER = 'int';\n\n/**\n * The 'MATRIX_4' shader parameter type.\n * @type {'mat4'}\n * @constant\n *\n * @memberof module:SHADER_PARAMETER_TYPES\n */\nconst MATRIX_4 = 'mat4';\n\n/**\n * The 'SAMPLER_2D' shader parameter type.\n * @type {'sampler2D'}\n * @constant\n *\n * @memberof module:SHADER_PARAMETER_TYPES\n */\nconst SAMPLER_2D = 'sampler2D';\n\n/**\n * The 'VECTOR_2' shader parameter type.\n * @type {'vec2'}\n * @constant\n *\n * @memberof module:SHADER_PARAMETER_TYPES\n */\nconst VECTOR_2 = 'vec2';\n\n/**\n * The 'VECTOR_3' shader parameter type.\n * @type {'vec3'}\n * @constant\n *\n * @memberof module:SHADER_PARAMETER_TYPES\n */\nconst VECTOR_3 = 'vec3';\n\nexport {\n\n    ARRAY_BOOLEAN,\n    ARRAY_FLOAT,\n    ARRAY_INTEGER,\n    ARRAY_MATRIX_4,\n    ARRAY_VECTOR_2,\n    ARRAY_VECTOR_3,\n    BOOLEAN,\n    FLOAT,\n    INTEGER,\n    MATRIX_4,\n    SAMPLER_2D,\n    VECTOR_2,\n    VECTOR_3\n};\n","/**\n * Abstract preloadables.\n *\n * @example\n *\n * class PreloadableExample extends Preloadable {}\n */\nclass Preloadable {\n\n    /**\n     * Stores the preloadable assets.\n     * @type {Array<string>}\n     * @public\n     * @static\n     */\n    static preloadables = [];\n}\n\nexport {\n\n    Preloadable\n};\n\nexport default Preloadable;\n","// 'ESLint' configuration\n/* global TypeGenericAction */\n/* global TypeGenericState */\n\nimport {Collider, Engine, Preloadable, Sound, Sprite, Stage, UTILS, Vector2, Vibration} from '../index.js';\n\n/**\n * Abstract actors.\n * @template {string} [TypeGenericAction=string] The generic type of the actions.\n * @template {string} [TypeGenericState=string] The generic type of the states.\n *\n * @example\n *\n * class ActorExample extends Actor {}\n */\nclass Actor extends Preloadable {\n\n    /**\n     * @callback TypeListenerAction An action listener.\n     * @param {TypeGenericAction} $action The action to listen.\n     * @protected\n     *\n     * @memberof Actor\n     */\n\n    /**\n     * @callback TypeListenerState A state listener.\n     * @param {TypeGenericState} $state The state to listen.\n     * @protected\n     *\n     * @memberof Actor\n     */\n\n    /**\n     * Stores the collider.\n     * @type {Collider}\n     * @private\n     */\n    $collider;\n\n    /**\n     * Stores the components.\n     * @type {Object<string, any>}\n     * @private\n     */\n    $components;\n\n    /**\n     * Stores the identifier.\n     * @type {string}\n     * @private\n     */\n    $identifier;\n\n    /**\n     * Stores the action listeners.\n     * @type {Object<string, TypeListenerAction>}\n     * @private\n     */\n    $listenerActions;\n\n    /**\n     * Stores the state listeners.\n     * @type {Object<string, Array<TypeListenerState>>}\n     * @private\n     */\n    $listenersStates;\n\n    /**\n     * Stores the sounds.\n     * @type {Array<Sound>}\n     * @private\n     */\n    $sounds;\n\n    /**\n     * Stores the sprite.\n     * @type {Sprite}\n     * @private\n     */\n    $sprite;\n\n    /**\n     * Stores the current stage.\n     * @type {Stage}\n     * @private\n     */\n    $stage;\n\n    /**\n     * Stores the position.\n     * @type {Vector2}\n     * @private\n     */\n    $translation;\n\n    /**\n     * Stores the uuid.\n     * @type {string}\n     * @private\n     */\n    $uuid;\n\n    /**\n     * Stores the vibrations.\n     * @type {Array<Vibration>}\n     * @private\n     */\n    $vibrations;\n\n    /**\n     * Stores the visible status.\n     * @type {boolean}\n     * @private\n     */\n    $visible;\n\n    /**\n     * Stores the z-index.\n     * @type {number}\n     * @private\n     */\n    $zIndex;\n\n    /**\n     * Gets the collider.\n     * @type {Collider}\n     * @public\n     */\n    get collider() {\n\n        return this.$collider;\n    }\n\n    /**\n     * Gets the current engine.\n     * @type {Engine}\n     * @public\n     */\n    get engine() {\n\n        return this.stage.engine;\n    }\n\n    /**\n     * Gets the identifier.\n     * @type {string}\n     * @public\n     */\n    get identifier() {\n\n        return this.$identifier;\n    }\n\n    /**\n     * Gets the sounds.\n     * @type {Array<Sound>}\n     * @public\n     */\n    get sounds() {\n\n        return this.$sounds;\n    }\n\n    /**\n     * Gets the sprite.\n     * @type {Sprite}\n     * @public\n     */\n    get sprite() {\n\n        return this.$sprite;\n    }\n\n    /**\n     * Gets the current stage.\n     * @type {Stage}\n     * @public\n     */\n    get stage() {\n\n        return this.$stage;\n    }\n\n    /**\n     * Gets the position.\n     * @type {Vector2}\n     * @public\n     */\n    get translation() {\n\n        return this.$translation;\n    }\n\n    /**\n     * Gets the uuid.\n     * @type {string}\n     * @public\n     */\n    get uuid() {\n\n        return this.$uuid;\n    }\n\n    /**\n     * Gets the vibrations.\n     * @type {Array<Vibration>}\n     * @public\n     */\n    get vibrations() {\n\n        return this.$vibrations;\n    }\n\n    /**\n     * Gets the visible status.\n     * @type {boolean}\n     * @public\n     */\n    get visible() {\n\n        return this.$visible;\n    }\n\n    /**\n     * Gets the z-index.\n     * @type {number}\n     * @public\n     */\n    get zIndex() {\n\n        return this.$zIndex;\n    }\n\n    /**\n     * Create a new actor.\n     * @param {Stage} $stage The stage on which to create the actor.\n     */\n    constructor($stage) {\n\n        super();\n\n        this.$stage = $stage;\n\n        this.$components = {};\n        this.$listenerActions = {};\n        this.$listenersStates = {};\n        this.$sounds = [];\n        this.$translation = new Vector2(0, 0);\n        this.$uuid = UTILS.uuid();\n        this.$vibrations = [];\n        this.$visible = true;\n        this.$zIndex = 0;\n    }\n\n    /**\n     * Sets an action listener.\n     * @param {TypeGenericAction} $action The action to listen.\n     * @param {TypeListenerAction} $handler The listener to set.\n     * @returns {this}\n     * @protected\n     */\n    $setListener($action, $handler) {\n\n        this.$listenerActions[$action] = $handler;\n\n        return this;\n    }\n\n    /**\n     * Triggers a changing state on listeners.\n     * @param {TypeGenericState} $state The changing state to trigger.\n     * @returns {this}\n     * @protected\n     */\n    $trigger($state) {\n\n        if (Object.hasOwn(this.$listenersStates, $state) === false) {\n\n            return this;\n        }\n\n        this.$listenersStates[$state].forEach(($handler) => {\n\n            $handler($state);\n        });\n\n        return this;\n    }\n\n    /**\n     * Adds a state listener.\n     * @param {TypeGenericState} $state The state to listen.\n     * @param {TypeListenerState} $handler The listener to add.\n     * @returns {this}\n     * @public\n     */\n    addListener($state, $handler) {\n\n        if (Object.hasOwn(this.$listenersStates, $state) === false) {\n\n            this.$listenersStates[$state] = [];\n        }\n\n        this.$listenersStates[$state].push($handler);\n\n        return this;\n    }\n\n    /**\n     * Adds the given sound.\n     * @param {Sound} $sound The sound to add.\n     * @returns {this}\n     * @public\n     */\n    addSound($sound) {\n\n        this.$sounds.push($sound);\n\n        return this;\n    }\n\n    /**\n     * Adds the given vibration.\n     * @param {Vibration} $vibration The vibration to add.\n     * @returns {this}\n     * @public\n     */\n    addVibration($vibration) {\n\n        this.$vibrations.push($vibration);\n\n        return this;\n    }\n\n    /**\n     * Gets a component.\n     * @param {string} $name The name of the component to get.\n     * @returns {any}\n     * @public\n     */\n    getComponent($name) {\n\n        return this.$components[$name];\n    }\n\n    /**\n     * Checks if the actor has a collider.\n     * @returns {boolean}\n     * @public\n     */\n    hasCollider() {\n\n        return this.$collider instanceof Collider;\n    }\n\n    /**\n     * Checks if the actor has the given component.\n     * @param {string} $name The name of the component to check.\n     * @returns {boolean}\n     * @public\n     */\n    hasComponent($name) {\n\n        return Object.hasOwn(this.$components, $name) === true;\n    }\n\n    /**\n     * Checks if the actor has a sprite.\n     * @returns {boolean}\n     * @public\n     */\n    hasSprite() {\n\n        return this.$sprite instanceof Sprite;\n    }\n\n    /**\n     * Called just after removing the actor.\n     * @public\n     */\n    onAfterRemove() {}\n\n    /**\n     * Called just before removing the actor.\n     * @public\n     */\n    onBeforeRemove() {}\n\n    /**\n     * Called when a collision is being resolved.\n     * @param {object} $parameters The given parameters.\n     * @param {Actor} $parameters.$actor The colliding actor.\n     * @param {boolean} $parameters.$east If the origin of collision is facing the east face.\n     * @param {boolean} $parameters.$north If the origin of collision is facing the north face.\n     * @param {boolean} $parameters.$south If the origin of collision is facing the south face.\n     * @param {boolean} $parameters.$west If the origin of collision is facing the west face.\n     * @public\n     */\n    onCollide({$actor, $east, $north, $south, $west}) {\n\n        void $actor;\n        void $east;\n        void $north;\n        void $south;\n        void $west;\n    }\n\n    /**\n     * Called when a collision is being entered.\n     * @param {object} $parameters The given parameters.\n     * @param {Actor} $parameters.$actor The colliding actor.\n     * @param {boolean} $parameters.$east If the origin of collision is facing the east face.\n     * @param {boolean} $parameters.$north If the origin of collision is facing the north face.\n     * @param {boolean} $parameters.$south If the origin of collision is facing the south face.\n     * @param {boolean} $parameters.$west If the origin of collision is facing the west face.\n     * @public\n     */\n    onCollideEnter({$actor, $east, $north, $south, $west}) {\n\n        void $actor;\n        void $east;\n        void $north;\n        void $south;\n        void $west;\n    }\n\n    /**\n     * Called when a collision is being left.\n     * @param {Actor} $actor The colliding actor.\n     * @public\n     */\n    onCollideLeave($actor) {\n\n        void $actor;\n    }\n\n    /**\n     * Called when the actor is being created.\n     * @public\n     */\n    onCreate() {}\n\n    /**\n     * Called when the visible status is being set.\n     * @param {boolean} $visible The visible status set.\n     * @public\n     */\n    onSetVisible($visible) {\n\n        void $visible;\n    }\n\n    /**\n     * Called when the z-index is being set.\n     * @param {number} $zIndex The z-index set.\n     * @public\n     */\n    onSetZIndex($zIndex) {\n\n        void $zIndex;\n    }\n\n    /**\n     * Called when a sound is finishing playing.\n     * @param {Sound} $sound The sound.\n     * @public\n     */\n    onSoundFinish($sound) {\n\n        void $sound;\n    }\n\n    /**\n     * Called when the actor is being updated by one tick update.\n     * @param {number} $timetick The tick duration (in ms).\n     * @public\n     */\n    onTick($timetick) {\n\n        void $timetick;\n    }\n\n    /**\n     * Called when the actor is being translated.\n     * @param {Vector2} $vector The translation applied.\n     * @public\n     */\n    onTranslate($vector) {\n\n        void $vector;\n    }\n\n    /**\n     * Removes the collider.\n     * @returns {this}\n     * @public\n     */\n    removeCollider() {\n\n        this.$collider = undefined;\n\n        return this;\n    }\n\n    /**\n     * Removes the given component.\n     * @param {string} $name The name of the component to remove.\n     * @returns {this}\n     * @public\n     */\n    removeComponent($name) {\n\n        this.$components[$name] = undefined;\n\n        return this;\n    }\n\n    /**\n     * Removes the given sound.\n     * @param {Sound} $sound The sound to remove.\n     * @returns {this}\n     * @public\n     */\n    removeSound($sound) {\n\n        UTILS.extract($sound, this.$sounds);\n\n        return this;\n    }\n\n    /**\n     * Removes all sound.\n     * @returns {this}\n     * @public\n     */\n    removeSounds() {\n\n        this.$sounds = [];\n\n        return this;\n    }\n\n    /**\n     * Removes the sprite.\n     * @returns {this}\n     * @public\n     */\n    removeSprite() {\n\n        this.$sprite = undefined;\n\n        return this;\n    }\n\n    /**\n     * Removes the given vibration.\n     * @param {Vibration} $vibration The vibration to remove.\n     * @returns {this}\n     * @public\n     */\n    removeVibration($vibration) {\n\n        UTILS.extract($vibration, this.$vibrations);\n\n        return this;\n    }\n\n    /**\n     * Removes all vibration.\n     * @returns {this}\n     * @public\n     */\n    removeVibrations() {\n\n        this.$vibrations = [];\n\n        return this;\n    }\n\n    /**\n     * Sets the collider.\n     * @param {Collider} $collider The collider to set.\n     * @returns {this}\n     * @public\n     */\n    setCollider($collider) {\n\n        this.$collider = $collider;\n\n        return this;\n    }\n\n    /**\n     * Sets a component.\n     * @param {string} $name The name of the component to set.\n     * @param {any} $component The value of the component to set.\n     * @returns {this}\n     * @public\n     */\n    setComponent($name, $component) {\n\n        this.$components[$name] = $component;\n\n        return this;\n    }\n\n    /**\n     * Sets the identifier.\n     * @param {string} $identifier The identifier to set.\n     * @returns {this}\n     * @public\n     */\n    setIdentifier($identifier) {\n\n        this.$identifier = $identifier;\n\n        return this;\n    }\n\n    /**\n     * Sets the sprite.\n     * @param {Sprite} $sprite The sprite to set.\n     * @returns {this}\n     * @public\n     */\n    setSprite($sprite) {\n\n        this.$sprite = $sprite;\n\n        return this;\n    }\n\n    /**\n     * Sets the visible status.\n     * @param {boolean} $visible The visible status to set.\n     * @returns {this}\n     * @public\n     */\n    setVisible($visible) {\n\n        this.$visible = $visible;\n\n        this.onSetVisible($visible);\n\n        return this;\n    }\n\n    /**\n     * Sets the z-index.\n     * @param {number} $zIndex The z-index to set.\n     * @returns {this}\n     * @public\n     */\n    setZIndex($zIndex) {\n\n        this.$zIndex = $zIndex;\n\n        this.onSetZIndex($zIndex);\n\n        return this;\n    }\n\n    /**\n     * Translates the actor in the world space from a third person point of view.\n     * @param {Vector2} $vector The translation to apply.\n     * @returns {this}\n     * @public\n     */\n    translate($vector) {\n\n        const translation = $vector.clone();\n\n        this.$translation.add(translation);\n\n        this.onTranslate(translation);\n\n        return this;\n    }\n\n    /**\n     * Translates the actor in the world space to the given position.\n     * @param {Vector2} $vector The position to translate to.\n     * @returns {this}\n     * @public\n     */\n    translateTo($vector) {\n\n        const translation = $vector.clone().subtract(this.$translation);\n\n        this.$translation.add(translation);\n\n        this.onTranslate(translation);\n\n        return this;\n    }\n\n    /**\n     * Triggers an action.\n     * @param {TypeGenericAction} $action The action to trigger.\n     * @returns {this}\n     * @public\n     */\n    trigger($action) {\n\n        if (Object.hasOwn(this.$listenerActions, $action) === false) {\n\n            return this;\n        }\n\n        this.$listenerActions[$action]($action);\n\n        return this;\n    }\n}\n\nexport {\n\n    Actor\n};\n\nexport default Actor;\n","// 'ESLint' configuration\n/* global TypeGenericAction */\n/* global TypeGenericState */\n\nimport {Actor, Engine, Preloadable, UTILS} from '../index.js';\n\n/**\n * Abstract stages.\n *\n * @example\n *\n * class StageExample extends Stage {}\n */\nclass Stage extends Preloadable {\n\n    /**\n     * Stores the current actors.\n     * @type {Array<Actor>}\n     * @private\n     */\n    $actors;\n\n    /**\n     * Stores the current engine.\n     * @type {Engine}\n     * @private\n     */\n    $engine;\n\n    /**\n     * Stores the point of view.\n     * @type {Actor}\n     * @private\n     */\n    $pointOfView;\n\n    /**\n     * Stores the uuid.\n     * @type {string}\n     * @private\n     */\n    $uuid;\n\n    /**\n     * Gets the current actors.\n     * @type {Array<Actor>}\n     * @public\n     */\n    get actors() {\n\n        return this.$actors;\n    }\n\n    /**\n     * Gets the current engine.\n     * @type {Engine}\n     * @public\n     */\n    get engine() {\n\n        return this.$engine;\n    }\n\n    /**\n     * Gets the point of view.\n     * @type {Actor}\n     * @public\n     */\n    get pointOfView() {\n\n        return this.$pointOfView;\n    }\n\n    /**\n     * Gets the uuid.\n     * @type {string}\n     * @public\n     */\n    get uuid() {\n\n        return this.$uuid;\n    }\n\n    /**\n     * Creates a new stage.\n     * @param {Engine} $engine The engine on which to create the stage.\n     */\n    constructor($engine) {\n\n        super();\n\n        this.$engine = $engine;\n\n        this.$actors = [];\n        this.$pointOfView = this.createActor(Actor);\n        this.$uuid = UTILS.uuid();\n    }\n\n    /**\n     * Creates the given actor.\n     * @template {string} [TypeGenericAction=string] The generic type of the actions.\n     * @template {string} [TypeGenericState=string] The generic type of the states.\n     * @param {typeof Actor<TypeGenericAction, TypeGenericState>} [$actor] The actor to create.\n     * @returns {Actor<TypeGenericAction, TypeGenericState>}\n     * @public\n     */\n    createActor($actor = Actor) {\n\n        const actor = new $actor(this);\n\n        this.$actors.push(actor);\n\n        actor.onCreate();\n\n        return actor;\n    }\n\n    /**\n     * Checks if the stage has the given actor.\n     * @param {Actor} $actor The actor to check.\n     * @returns {boolean}\n     * @public\n     */\n    hasActor($actor) {\n\n        return this.$actors.indexOf($actor) !== -1;\n    }\n\n    /**\n     * Called when the stage is being created.\n     * @public\n     */\n    onCreate() {}\n\n    /**\n     * Removes the given actor.\n     * @param {Actor} $actor The actor to remove.\n     * @public\n     */\n    removeActor($actor) {\n\n        const index = this.$actors.indexOf($actor);\n\n        if (index === -1) {\n\n            return;\n        }\n\n        $actor.onBeforeRemove();\n\n        this.$actors.splice(index, 1);\n\n        $actor.onAfterRemove();\n    }\n\n    /**\n     * Removes all actors.\n     * @public\n     */\n    removeActors() {\n\n        while (this.$actors.length > 0) {\n\n            this.removeActor(this.$actors[0]);\n        }\n    }\n\n    /**\n     * Sets the given actor as the point of view.\n     * @param {Actor} $actor The actor to set as the point of view.\n     * @public\n     */\n    setPointOfView($actor) {\n\n        this.$pointOfView = $actor;\n    }\n}\n\nexport {\n\n    Stage\n};\n\nexport default Stage;\n","import {Vector2} from '../index.js';\n\n/**\n * Creates AABBs.\n *\n * @example\n *\n * const aabb = new AABB(new Vector2(-1, -1), new Vector2(1, 1));\n */\nclass AABB {\n\n    /**\n     * Stores the maximum values of the AABB.\n     * @type {Vector2}\n     * @private\n     */\n    $maximum;\n\n    /**\n     * Stores the minimum values of the AABB.\n     * @type {Vector2}\n     * @private\n     */\n    $minimum;\n\n    /**\n     * Gets the center of the AABB.\n     * @type {Vector2}\n     * @public\n     */\n    get center() {\n\n        return this.minimum.clone().add(this.halfSize);\n    }\n\n    /**\n     * Gets the half-size of the AABB.\n     * @type {Vector2}\n     * @public\n     */\n    get halfSize() {\n\n        return this.size.clone().scale(0.5);\n    }\n\n    /**\n     * Gets the maximum values of the AABB.\n     * @type {Vector2}\n     * @public\n     */\n    get maximum() {\n\n        return this.$maximum;\n    }\n\n    /**\n     * Gets the minimum values of the AABB.\n     * @type {Vector2}\n     * @public\n     */\n    get minimum() {\n\n        return this.$minimum;\n    }\n\n    /**\n     * Gets the size of the AABB.\n     * @type {Vector2}\n     * @public\n     */\n    get size() {\n\n        return this.$maximum.clone().subtract(this.$minimum);\n    }\n\n    /**\n     * Creates a new AABB.\n     * @param {Vector2} $minimum The minimum values of the AABB to create.\n     * @param {Vector2} $maximum The maximum values of the AABB to create.\n     */\n    constructor($minimum, $maximum) {\n\n        this.$maximum = $maximum;\n        this.$minimum = $minimum;\n    }\n\n    /**\n     * Gets the manhattan distance between two AABBs.\n     * @param {AABB} $a The first AABB to compare.\n     * @param {AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static distanceManhattan($a, $b) {\n\n        const distanceX = AABB.distanceX($a, $b);\n        const distanceY = AABB.distanceY($a, $b);\n\n        if (distanceX > 0 || distanceY > 0) {\n\n            return Math.max(distanceX, 0) + Math.max(distanceY, 0);\n        }\n\n        return distanceX + distanceY;\n    }\n\n    /**\n     * Gets the distance between two AABBs on the x-axis.\n     * @param {AABB} $a The first AABB to compare.\n     * @param {AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static distanceX($a, $b) {\n\n        const distanceCenter = Math.abs($b.center.x - $a.center.x);\n        const distanceMinimum = $a.halfSize.x + $b.halfSize.x;\n\n        return distanceCenter - distanceMinimum;\n    }\n\n    /**\n     * Gets the distance between two AABBs on the y-axis.\n     * @param {AABB} $a The first AABB to compare.\n     * @param {AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static distanceY($a, $b) {\n\n        const distanceCenter = Math.abs($b.center.y - $a.center.y);\n        const distanceMinimum = $a.halfSize.y + $b.halfSize.y;\n\n        return distanceCenter - distanceMinimum;\n    }\n\n    /**\n     * Creates a new AABB from the given AABB.\n     * @param {AABB} $aabb The given AABB.\n     * @returns {AABB}\n     * @public\n     * @static\n     */\n    static from($aabb) {\n\n        return $aabb.clone();\n    }\n\n    /**\n     * Creates a new AABB from the given size.\n     * @param {Vector2} $size The given size.\n     * @returns {AABB}\n     * @public\n     * @static\n     */\n    static fromSize($size) {\n\n        return new AABB(\n\n            $size.clone().scale(-0.5),\n            $size.clone().scale(0.5)\n        );\n    }\n\n    /**\n     * Gets the delta penetration between two AABBs strictly overlaping with each other on the x-axis (the common area).\n     * @param {AABB} $a The first AABB to compare.\n     * @param {AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static overlapX($a, $b) {\n\n        const distanceCenter = Math.abs($b.center.x - $a.center.x);\n        const distanceMinimum = $a.halfSize.x + $b.halfSize.x;\n\n        return distanceMinimum - distanceCenter;\n    }\n\n    /**\n     * Gets the delta penetration between two AABBs strictly overlaping with each other on the y-axis (the common area).\n     * @param {AABB} $a The first AABB to compare.\n     * @param {AABB} $b The second AABB to compare.\n     * @returns {number}\n     * @public\n     * @static\n     */\n    static overlapY($a, $b) {\n\n        const distanceCenter = Math.abs($b.center.y - $a.center.y);\n        const distanceMinimum = $a.halfSize.y + $b.halfSize.y;\n\n        return distanceMinimum - distanceCenter;\n    }\n\n    /**\n     * Clones the AABB.\n     * @returns {AABB}\n     * @public\n     */\n    clone() {\n\n        return new AABB(this.$minimum, this.$maximum);\n    }\n\n    /**\n     * Translates the AABB in the world space from a third person point of view.\n     * @param {Vector2} $vector The translation to apply.\n     * @returns {this}\n     * @public\n     */\n    translate($vector) {\n\n        this.$maximum = this.$maximum.clone().add($vector);\n        this.$minimum = this.$minimum.clone().add($vector);\n\n        return this;\n    }\n}\n\nexport {\n\n    AABB\n};\n\nexport default AABB;\n","import {AABB, COLLIDER_TYPES} from '../index.js';\n\n/**\n * Creates colliders.\n *\n * @example\n *\n * const collider = new Collider({$boundaries, $traversable, $type});\n */\nclass Collider {\n\n    /**\n     * @typedef {(COLLIDER_TYPES.DYNAMIC | COLLIDER_TYPES.KINETIC | COLLIDER_TYPES.STATIC)} TypeCollider A collider type.\n     * @protected\n     *\n     * @memberof Collider\n     */\n\n    /**\n     * Stores the boundaries.\n     * @type {AABB}\n     * @private\n     */\n    $boundaries;\n\n    /**\n     * Stores the traversable status.\n     * @type {boolean}\n     * @private\n     */\n    $traversable;\n\n    /**\n     * Stores the collider type.\n     * @type {TypeCollider}\n     * @private\n     */\n    $type;\n\n    /**\n     * Gets the boundaries.\n     * @type {AABB}\n     * @public\n     */\n    get boundaries() {\n\n        return this.$boundaries;\n    }\n\n    /**\n     * Gets the traversable status.\n     * @type {boolean}\n     * @public\n     */\n    get traversable() {\n\n        return this.$traversable;\n    }\n\n    /**\n     * Gets the collider type.\n     * @type {TypeCollider}\n     * @public\n     */\n    get type() {\n\n        return this.$type;\n    }\n\n    /**\n     * Creates a new collider.\n     * @param {object} $parameters The given parameters.\n     * @param {AABB} $parameters.$boundaries The boundaries of the collider to create.\n     * @param {boolean} [$parameters.$traversable] The traversable status of the collider to create.\n     * @param {TypeCollider} $parameters.$type The type of the collider to create.\n     */\n    constructor({$boundaries, $traversable = false, $type}) {\n\n        this.$boundaries = $boundaries;\n        this.$traversable = $traversable;\n        this.$type = $type;\n    }\n}\n\nexport {\n\n    Collider\n};\n\nexport default Collider;\n","import {Loop, MEDIA_TYPES, Stage, SystemActor, SystemAudio, SystemCollision, SystemInput, SystemRender, SystemVibration, UTILS, Vector2, Vector3} from '../index.js';\n\n/**\n * Creates game engines.\n *\n * @example\n *\n * const engine = new Engine({$color, $container, $resolution});\n * engine.initiate(60);\n *\n * await engine.preloadStage(SceneExample);\n *\n * engine.createStage(SceneExample);\n */\nclass Engine {\n\n    /**\n     * Stores the rendering background color.\n     * @type {Vector3}\n     * @private\n     */\n    $color;\n\n    /**\n     * Stores the container.\n     * @type {HTMLElement}\n     * @private\n     */\n    $container;\n\n    /**\n     * Stores the loop.\n     * @type {Loop}\n     * @private\n     */\n    $loop;\n\n    /**\n     * Stores the next stage.\n     * @type {typeof Stage}\n     * @private\n     */\n    $next;\n\n    /**\n     * Stores the preloaded status of the assets.\n     * @type {Set<string>}\n     * @private\n     */\n    $preloaded;\n\n    /**\n     * Stores the rendering resolution.\n     * @type {Vector2}\n     * @private\n     */\n    $resolution;\n\n    /**\n     * Stores the current stage.\n     * @type {Stage}\n     * @private\n     */\n    $stage;\n\n    /**\n     * Stores the current actor system.\n     * @type {SystemActor}\n     * @private\n     */\n    $systemActor;\n\n    /**\n     * Stores the current audio system.\n     * @type {SystemAudio}\n     * @private\n     */\n    $systemAudio;\n\n    /**\n     * Stores the current collision system.\n     * @type {SystemCollision}\n     * @private\n     */\n    $systemCollision;\n\n    /**\n     * Stores the current input system.\n     * @type {SystemInput}\n     * @private\n     */\n    $systemInput;\n\n    /**\n     * Stores the current render system.\n     * @type {SystemRender}\n     * @private\n     */\n    $systemRender;\n\n    /**\n     * Stores the current vibration system.\n     * @type {SystemVibration}\n     * @private\n     */\n    $systemVibration;\n\n    /**\n     * Stores the uuid.\n     * @type {string}\n     * @private\n     */\n    $uuid;\n\n    /**\n     * Gets the container.\n     * @type {HTMLElement}\n     * @public\n     */\n    get container() {\n\n        return this.$container;\n    }\n\n    /**\n     * Gets the current stage.\n     * @type {Stage}\n     * @public\n     */\n    get stage() {\n\n        return this.$stage;\n    }\n\n    /**\n     * Gets the uuid.\n     * @type {string}\n     * @public\n     */\n    get uuid() {\n\n        return this.$uuid;\n    }\n\n    /**\n     * Creates a new game engine.\n     * @param {object} [$parameters] The given parameters.\n     * @param {Vector3} [$parameters.$color] The rendering background color to use.\n     * @param {HTMLElement} [$parameters.$container] The container for the game engine to create.\n     * @param {Vector2} [$parameters.$resolution] The rendering resolution to use.\n     */\n    constructor({$color = new Vector3(0, 0, 0), $container = document.body, $resolution = new Vector2(320, 240)} = {}) {\n\n        this.$color = $color;\n        this.$container = $container;\n        this.$resolution = $resolution;\n\n        this.$uuid = UTILS.uuid();\n\n        this.$loop = new Loop(this.tick.bind(this));\n        this.$preloaded = new Set();\n\n        this.$systemActor = new SystemActor();\n        this.$systemAudio = new SystemAudio();\n        this.$systemCollision = new SystemCollision();\n        this.$systemInput = new SystemInput({$container: this.$container});\n        this.$systemRender = new SystemRender({$color: this.$color, $container: this.$container, $resolution: this.$resolution});\n        this.$systemVibration = new SystemVibration();\n    }\n\n    /**\n     * Creates the given stage.\n     * @param {typeof Stage} $stage The stage to create.\n     * @private\n     */\n    $createStage($stage) {\n\n        this.$stage = new $stage(this);\n        this.$stage.onCreate();\n    }\n\n    /**\n     * Creates the given stage on the next tick update.\n     * @param {typeof Stage} $stage The stage to create on the next tick update.\n     * @public\n     */\n    createStage($stage) {\n\n        this.$next = $stage;\n    }\n\n    /**\n     * Gets the current input state value of the given digital input.\n     * @param {string} $input The event code of the given digital input.\n     * @returns {boolean}\n     * @public\n     */\n    getInput($input) {\n\n        return this.$systemInput.getInput($input);\n    }\n\n    /**\n     * Gets the current input state value of the given analog input.\n     * @param {string} $input The event code of the given analog input.\n     * @returns {number}\n     * @public\n     */\n    getInputAnalog($input) {\n\n        return this.$systemInput.getInputAnalog($input);\n    }\n\n    /**\n     * Gets the position in the current stage from the given clipped position in the screen.\n     * @param {Vector2} $vector The position in the screen (with values in [-1, 1] ranges).\n     * @returns {Vector2}\n     * @public\n     */\n    getTranslationFromScreen($vector) {\n\n        return this.$systemRender.getTranslationFromScreen(this.$stage, $vector);\n    }\n\n    /**\n     * Checks if the engine has loaded the given asset.\n     * @param {string} $asset The asset source.\n     * @returns {boolean}\n     * @public\n     */\n    hasAssetLoaded($asset) {\n\n        return this.$preloaded.has($asset) === true;\n    }\n\n    /**\n     * Initiates the engine.\n     * @param {number} [$tickrateMinimum] The minimum acceptable number of ticks per virtual second (in ticks/s).\n     * @public\n     */\n    initiate($tickrateMinimum = 60) {\n\n        this.$systemInput.initiate();\n        this.$systemActor.initiate();\n        this.$systemCollision.initiate();\n        this.$systemRender.initiate();\n        this.$systemAudio.initiate();\n        this.$systemVibration.initiate();\n\n        this.$loop.initiate($tickrateMinimum);\n    }\n\n    /**\n     * Preloads the assets of the given stage.\n     * @param {typeof Stage} $stage The stage to preload the assets from.\n     * @returns {Promise<Array<undefined | AudioBuffer | WebGLTexture>>}\n     * @public\n     */\n    preloadStage($stage) {\n\n        /**\n         * @type {Array<Promise<undefined | AudioBuffer | WebGLTexture>>}\n         */\n        const promises = [];\n\n        UTILS.deduplicate($stage.preloadables).forEach(($asset) => {\n\n            if (this.hasAssetLoaded($asset) === true) {\n\n                return;\n            }\n\n            this.$preloaded.add($asset);\n\n            if (this.$systemAudio.hasAssetLoaded($asset) === true) {\n\n                return;\n            }\n\n            if (this.$systemRender.hasAssetLoaded($asset) === true) {\n\n                return;\n            }\n\n            /**\n             * @type {Promise<undefined | AudioBuffer | WebGLTexture>}\n             */\n            const promise = new Promise(($resolve) => {\n\n                fetch($asset)\n                .then(($content) => {\n\n                    const contentType = $content.headers.get('Content-Type');\n                    const [mediaType] = contentType.toLowerCase().split('/');\n\n                    switch (mediaType) {\n\n                        case MEDIA_TYPES.AUDIO: {\n\n                            this.$systemAudio.loadAudio($content)\n                            .then(($bufferAudio) => {\n\n                                $resolve($bufferAudio);\n                            });\n\n                            break;\n                        }\n\n                        case MEDIA_TYPES.IMAGE: {\n\n                            this.$systemRender.loadTexture($content)\n                            .then(($texture) => {\n\n                                $resolve($texture);\n                            });\n\n                            break;\n                        }\n\n                        default: {\n\n                            $resolve(undefined);\n                        }\n                    }\n                });\n            });\n\n            promises.push(promise);\n        });\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Removes the native pointer display.\n     * @public\n     */\n    removePointerNative() {\n\n        this.$systemRender.removePointerNative();\n    }\n\n    /**\n     * Sets the rendering background color.\n     * @param {Vector3} $color The rendering background color to set.\n     * @public\n     */\n    setColor($color) {\n\n        this.$systemRender.setColor($color);\n    }\n\n    /**\n     * Sets the rendering resolution.\n     * @param {Vector2} $resolution The rendering resolution to set.\n     * @public\n     */\n    setResolution($resolution) {\n\n        this.$systemRender.setResolution($resolution);\n    }\n\n    /**\n     * Terminates the engine (immediately) (must be used outside the lifecycle of this engine).\n     * @public\n     */\n    terminate() {\n\n        this.$loop.terminate();\n\n        this.$createStage(Stage);\n        this.tick(0);\n\n        this.$systemInput.terminate();\n        this.$systemActor.terminate();\n        this.$systemCollision.terminate();\n        this.$systemRender.terminate();\n        this.$systemAudio.terminate();\n        this.$systemVibration.terminate();\n\n        this.$preloaded = new Set();\n    }\n\n    /**\n     * Updates each system once.\n     * @param {number} $timetick The tick duration (in ms).\n     * @public\n     */\n    tick($timetick) {\n\n        if (typeof this.$next === typeof Stage) {\n\n            const stage = this.$next;\n\n            this.$next = undefined;\n\n            this.$createStage(stage);\n        }\n\n        if (typeof this.$stage === 'undefined') {\n\n            return;\n        }\n\n        this.$systemInput.tick({\n\n            $stage: this.$stage,\n            $timetick: $timetick\n        });\n\n        this.$systemActor.tick({\n\n            $stage: this.$stage,\n            $timetick: $timetick\n        });\n\n        this.$systemCollision.tick({\n\n            $stage: this.$stage,\n            $timetick: $timetick\n        });\n\n        this.$systemRender.tick({\n\n            $stage: this.$stage,\n            $timetick: $timetick\n        });\n\n        this.$systemAudio.tick({\n\n            $stage: this.$stage,\n            $timetick: $timetick\n        });\n\n        this.$systemVibration.tick({\n\n            $stage: this.$stage,\n            $timetick: $timetick\n        });\n    }\n}\n\nexport {\n\n    Engine\n};\n\nexport default Engine;\n","import {Actor, Preloadable, Stage} from '../index.js';\n\n/**\n * @module FACTORIES\n */\n\n/**\n * Prepares an actor with preloadable assets.\n * @param {Array<typeof Preloadable | typeof Actor<string, string>>} $preloadables The preloadable assets (mix of preloadable assets and/or actors with preloadable assets).\n * @returns {typeof Actor<string, string>}\n *\n * @memberof module:FACTORIES\n */\nfunction ActorWithPreloadables($preloadables) {\n\n    /**\n     * @type {Set<string>}\n     */\n    const preloadables = new Set();\n\n    $preloadables.forEach(($preloadable) => {\n\n        if (typeof $preloadable !== typeof Preloadable) {\n\n            return;\n        }\n\n        $preloadable.preloadables.forEach(($preloadable) => {\n\n            if (preloadables.has($preloadable) === true) {\n\n                return;\n            }\n\n            preloadables.add($preloadable);\n        });\n    });\n\n    /**\n     * @ignore\n     */\n    class ActorWithPreloadables extends Actor {\n\n        /**\n         * Stores the preloadable assets.\n         * @type {Array<string>}\n         * @public\n         * @static\n         */\n        static preloadables = Array.from(preloadables);\n    }\n\n    return ActorWithPreloadables;\n}\n\n/**\n * Prepares a preloadable sound.\n * @param {string} $sound The preloadable sound.\n * @returns {typeof Preloadable}\n *\n * @memberof module:FACTORIES\n */\nfunction PreloadableSound($sound) {\n\n    /**\n     * @ignore\n     */\n    class PreloadableSound extends Preloadable {\n\n        /**\n         * Stores the preloadable assets.\n         * @type {Array<string>}\n         * @public\n         * @static\n         */\n        static preloadables = [$sound];\n    }\n\n    return PreloadableSound;\n}\n\n/**\n * Prepares a preloadable texture.\n * @param {string} $texture The preloadable texture.\n * @returns {typeof Preloadable}\n *\n * @memberof module:FACTORIES\n */\nfunction PreloadableTexture($texture) {\n\n    /**\n     * @ignore\n     */\n    class PreloadableTexture extends Preloadable {\n\n        /**\n         * Stores the preloadable assets.\n         * @type {Array<string>}\n         * @public\n         * @static\n         */\n        static preloadables = [$texture];\n    }\n\n    return PreloadableTexture;\n}\n\n/**\n * Prepares a stage with preloadable assets.\n * @param {Array<typeof Preloadable | typeof Actor<string, string>>} $preloadables The preloadable assets (mix of preloadable assets and/or actors with preloadable assets).\n * @returns {typeof Stage}\n *\n * @memberof module:FACTORIES\n */\nfunction StageWithPreloadables($preloadables) {\n\n    /**\n     * @type {Set<string>}\n     */\n    const preloadables = new Set();\n\n    $preloadables.forEach(($preloadable) => {\n\n        if (typeof $preloadable !== typeof Preloadable) {\n\n            return;\n        }\n\n        $preloadable.preloadables.forEach(($preloadable) => {\n\n            if (preloadables.has($preloadable) === true) {\n\n                return;\n            }\n\n            preloadables.add($preloadable);\n        });\n    });\n\n    /**\n     * @ignore\n     */\n    class StageWithPreloadables extends Stage {\n\n        /**\n         * Stores the preloadable assets.\n         * @type {Array<string>}\n         * @public\n         * @static\n         */\n        static preloadables = Array.from(preloadables);\n    }\n\n    return StageWithPreloadables;\n}\n\nexport {\n\n    ActorWithPreloadables,\n    PreloadableSound,\n    PreloadableTexture,\n    StageWithPreloadables\n};\n","/**\n * Creates update loops.\n *\n * @example\n *\n * const loop = new Loop(handler);\n * loop.initiate();\n */\nclass Loop {\n\n    /**\n     * Stores the handler to execute with the update loop.\n     * @type {Function}\n     * @private\n     */\n    $handler;\n\n    /**\n     * Stores the identifier of the last requestAnimationFrame call.\n     * @type {number}\n     * @private\n     */\n    $identifier;\n\n    /**\n     * Stores the time value of the previous tick call.\n     * @type {number}\n     * @private\n     */\n    $timePrevious;\n\n    /**\n     * Stores the global scope used.\n     * @type {Window}\n     * @private\n     */\n    $scope;\n\n    /**\n     * Creates a new update loop.\n     * @param {Function} $handler The handler to execute with the update loop.\n     * @param {Window} $scope The global scope to use.\n     */\n    constructor($handler, $scope = window) {\n\n        this.$handler = $handler;\n        this.$scope = $scope;\n    }\n\n    /**\n     * Loops the update loop.\n     * @param {number} $timetick The tick duration (in ms).\n     * @private\n     */\n    $loop($timetick) {\n\n        const timeCurrent = performance.now();\n\n        if (typeof this.$timePrevious !== 'undefined') {\n\n            const timetickCurrent = timeCurrent - this.$timePrevious;\n            const timetickMinimum = $timetick;\n            const timetickSafe = Math.min(timetickMinimum, timetickCurrent);\n\n            this.$handler(timetickSafe);\n        }\n\n        this.$identifier = this.$scope.requestAnimationFrame(this.$loop.bind(this, $timetick));\n\n        this.$timePrevious = timeCurrent;\n    }\n\n    /**\n     * Initiates the update loop.\n     * @param {number} [$tickrateMinimum] The minimum acceptable number of ticks per virtual second (in ticks/s).\n     * @public\n     */\n    initiate($tickrateMinimum = 60) {\n\n        this.$loop(1000 / $tickrateMinimum);\n    }\n\n    /**\n     * Terminates the update loop.\n     * @public\n     */\n    terminate() {\n\n        if (typeof this.$identifier !== 'undefined') {\n\n            this.$scope.cancelAnimationFrame(this.$identifier);\n\n            this.$timePrevious = undefined;\n        }\n    }\n}\n\nexport {\n\n    Loop\n};\n\nexport default Loop;\n","// 'ESLint' configuration\n/* eslint-disable @stylistic/indent-binary-ops */\n/* eslint-disable @stylistic/operator-linebreak */\n\nimport {SHADER_PARAMETER_TYPES} from '../index.js';\n\n/**\n * Static default shader sources.\n *\n * @example\n *\n * const sourceFragment = Shader.sourceFragment;\n * const sourceVertex = Shader.sourceVertex;\n */\nclass Shader {\n\n    /**\n     * @typedef {(SHADER_PARAMETER_TYPES.VECTOR_2 | SHADER_PARAMETER_TYPES.VECTOR_3)} TypeTypeAttribute A type of attribute.\n     * @protected\n     *\n     * @memberof Shader\n     */\n\n    /**\n     * @typedef {(SHADER_PARAMETER_TYPES.BOOLEAN | SHADER_PARAMETER_TYPES.ARRAY_BOOLEAN | SHADER_PARAMETER_TYPES.FLOAT | SHADER_PARAMETER_TYPES.ARRAY_FLOAT | SHADER_PARAMETER_TYPES.INTEGER | SHADER_PARAMETER_TYPES.ARRAY_INTEGER | SHADER_PARAMETER_TYPES.MATRIX_4 | SHADER_PARAMETER_TYPES.ARRAY_MATRIX_4 | SHADER_PARAMETER_TYPES.SAMPLER_2D | SHADER_PARAMETER_TYPES.VECTOR_2 | SHADER_PARAMETER_TYPES.ARRAY_VECTOR_2 | SHADER_PARAMETER_TYPES.VECTOR_3 | SHADER_PARAMETER_TYPES.ARRAY_VECTOR_3)} TypeTypeUniform A type of uniform.\n     * @protected\n     *\n     * @memberof Shader\n     */\n\n    /**\n     * Stores the attributes needed by the shader program.\n     * @type {Object<string, TypeTypeAttribute>}\n     * @public\n     * @readonly\n     * @static\n     */\n    static attributes = {\n\n        'attributePosition': SHADER_PARAMETER_TYPES.VECTOR_2,\n        'attributeUvmapping': SHADER_PARAMETER_TYPES.VECTOR_2\n    };\n\n    /**\n     * Stores the fragment shader source.\n     * @type {string}\n     * @public\n     * @readonly\n     * @static\n     */\n    static sourceFragment = (\n\n        'precision highp float;' +\n\n        'uniform sampler2D uniformTexture;' +\n\n        'varying vec2 varyingUvmapping;' +\n\n        'void main(void) {' +\n\n            'gl_FragColor = texture2D(uniformTexture, varyingUvmapping);' +\n        '}'\n    );\n\n    /**\n     * Stores the vertex shader source.\n     * @type {string}\n     * @public\n     * @readonly\n     * @static\n     */\n    static sourceVertex = (\n\n        'attribute vec2 attributePosition;' +\n        'attribute vec2 attributeUvmapping;' +\n\n        'uniform vec2 uniformAspect;' +\n        'uniform vec2 uniformSize;' +\n        'uniform vec2 uniformTranslation;' +\n        'uniform vec2 uniformTranslationPointOfView;' +\n\n        'varying vec2 varyingUvmapping;' +\n\n        'void main(void) {' +\n\n            'varyingUvmapping = attributeUvmapping;' +\n\n            'vec2 position = (attributePosition * uniformSize + uniformTranslation);' +\n            'vec2 projection = 2.0 * (position - uniformTranslationPointOfView) / uniformAspect;' +\n\n            'gl_Position = vec4(projection, 0.0, 1.0);' +\n        '}'\n    );\n\n    /**\n     * Stores the uniforms needed by the shader program.\n     * @type {Object<string, TypeTypeUniform>}\n     * @public\n     * @readonly\n     * @static\n     */\n    static uniforms = {\n\n        'uniformAspect': SHADER_PARAMETER_TYPES.VECTOR_2,\n        'uniformSize': SHADER_PARAMETER_TYPES.VECTOR_2,\n        'uniformTexture': SHADER_PARAMETER_TYPES.SAMPLER_2D,\n        'uniformTranslation': SHADER_PARAMETER_TYPES.VECTOR_2,\n        'uniformTranslationPointOfView': SHADER_PARAMETER_TYPES.VECTOR_2\n    };\n}\n\nexport {\n\n    Shader\n};\n\nexport default Shader;\n","import {AABB, Vector2} from '../index.js';\n\n/**\n * Creates sprites.\n *\n * @example\n *\n * // minimal\n * const sprite = new Sprite({\n *\n *     $sizeTarget: new Vector2(32, 32),\n *     $texture: texture\n * });\n *\n * @example\n *\n * // full\n * const sprite = new Sprite({\n *\n *     $frameSource: new AABB(new Vector2(0, 0), new Vector2(1, 1)),\n *     $sizeTarget: new Vector2(32, 32),\n *     $texture: texture\n * });\n */\nclass Sprite {\n\n    /**\n     * Stores the frame to use from the texture sources (with values in [0, 1] ranges).\n     * @type {AABB}\n     * @private\n     */\n    $frameSource;\n\n    /**\n     * Stores the serialized value of frame to use from the texture sources (with values in [0, 1] ranges).\n     * @type {string}\n     * @private\n     */\n    $frameSourceSerialized;\n\n    /**\n     * Stores the target size.\n     * @type {Vector2}\n     * @private\n     */\n    $sizeTarget;\n\n    /**\n     * Stores the texture source.\n     * @type {string}\n     * @private\n     */\n    $texture;\n\n    /**\n     * Gets the frame to use from the texture sources.\n     * @type {AABB}\n     * @public\n     */\n    get frameSource() {\n\n        return this.$frameSource;\n    }\n\n    /**\n     * Gets the serialized value of the frame to use from the texture sources.\n     * @type {string}\n     * @public\n     */\n    get frameSourceSerialized() {\n\n        return this.$frameSourceSerialized;\n    }\n\n    /**\n     * Gets the target size.\n     * @type {Vector2}\n     * @public\n     */\n    get sizeTarget() {\n\n        return this.$sizeTarget;\n    }\n\n    /**\n     * Gets the texture source.\n     * @type {string}\n     * @public\n     */\n    get texture() {\n\n        return this.$texture;\n    }\n\n    /**\n     * Creates a new sprite.\n     * @param {object} $parameters The given parameters.\n     * @param {AABB} [$parameters.$frameSource] The frame to use from the texture sources (with values in [0, 1] ranges) (if not specified then the full texture is used).\n     * @param {Vector2} $parameters.$sizeTarget The target size.\n     * @param {string} $parameters.$texture The texture source.\n     */\n    constructor({$frameSource = new AABB(new Vector2(0, 0), new Vector2(1, 1)), $sizeTarget, $texture}) {\n\n        this.$frameSource = $frameSource;\n        this.$sizeTarget = $sizeTarget;\n        this.$texture = $texture;\n\n        this.$frameSourceSerialized = JSON.stringify([\n\n            [$frameSource.minimum.x, $frameSource.minimum.y],\n            [$frameSource.maximum.x, $frameSource.maximum.y]\n        ]);\n    }\n}\n\nexport {\n\n    Sprite\n};\n\nexport default Sprite;\n","// 'ESLint' configuration\n/* global TypeGeneric */\n\n/**\n * Creates state managers.\n * @template {any} TypeGeneric The generic type of the data state.\n *\n * @example\n *\n * const state = new State(data);\n */\nclass State {\n\n    /**\n     * @callback TypeWatcherState A state changing handler.\n     * @param {TypeGeneric} $state The new data state.\n     * @returns {void}\n     * @protected\n     *\n     * @memberof State\n     */\n\n    /**\n     * Stores the data state.\n     * @type {TypeGeneric}\n     * @private\n     */\n    $data;\n\n    /**\n     * Stores the state changing handlers.\n     * @type {Array<TypeWatcherState>}\n     * @private\n     */\n    $watchers;\n\n    /**\n     * Creates a new state manager.\n     * @param {TypeGeneric} $data The data state to store.\n     */\n    constructor($data) {\n\n        this.$data = $data;\n        this.$watchers = [];\n    }\n\n    /**\n     * Gets the data state.\n     * @returns {TypeGeneric}\n     * @public\n     */\n    getState() {\n\n        return this.$data;\n    }\n\n    /**\n     * Sets the data state.\n     * @param {TypeGeneric} $data The data state to set.\n     * @public\n     */\n    setState($data) {\n\n        this.$data = $data;\n\n        this.$watchers.forEach(($handler) => {\n\n            $handler(this.$data);\n        });\n    }\n\n    /**\n     * Removes all watchers of the data state changes.\n     * @public\n     */\n    unwatchAll() {\n\n        this.$watchers = [];\n    }\n\n    /**\n     * Removes a watcher of the data state changes.\n     * @param {TypeWatcherState} $handler The state changing handler to detach.\n     * @public\n     */\n    unwatchState($handler) {\n\n        while (this.$watchers.indexOf($handler) !== -1) {\n\n            this.$watchers.splice(this.$watchers.indexOf($handler), 1);\n        }\n    }\n\n    /**\n     * Adds a watcher for the data state changes.\n     * @param {TypeWatcherState} $handler The state changing handler to attach.\n     * @public\n     */\n    watchState($handler) {\n\n        this.$watchers.push($handler);\n    }\n}\n\nexport {\n\n    State\n};\n\nexport default State;\n","import {Stage} from '../index.js';\n\n/**\n * Abstract systems.\n *\n * @example\n *\n * class SystemExample extends System {}\n */\nclass System {\n\n    /**\n     * Stores the initiated status.\n     * @type {boolean}\n     * @protected\n     */\n    $initiated;\n\n    /**\n     * Creates a new system.\n     * @protected\n     */\n    constructor() {\n\n        this.$initiated = false;\n    }\n\n    /**\n     * Initiates the system.\n     * @public\n     */\n    initiate() {\n\n        if (this.$initiated === true) {\n\n            return;\n        }\n\n        this.onInitiate();\n\n        this.$initiated = true;\n    }\n\n    /**\n     * Called when the system is being initiated.\n     * @public\n     */\n    onInitiate() {}\n\n    /**\n     * Called when the system is being terminated.\n     * @returns {(undefined | Promise<void>)}\n     * @public\n     */\n    onTerminate() {\n\n        return undefined;\n    }\n\n    /**\n     * Called when the system is being updated by one tick update.\n     * @param {object} $parameters The given parameters.\n     * @param {Stage} $parameters.$stage The stage on which to execute the system.\n     * @param {number} $parameters.$timetick The tick duration (in ms).\n     * @public\n     */\n    onTick({$stage, $timetick}) {\n\n        void $stage;\n        void $timetick;\n    }\n\n    /**\n     * Terminates the system.\n     * @public\n     */\n    terminate() {\n\n        if (this.$initiated === false) {\n\n            return;\n        }\n\n        const terminated = this.onTerminate();\n\n        if (typeof terminated === 'undefined') {\n\n            this.$initiated = false;\n\n            return;\n        }\n\n        terminated.then(() => {\n\n            this.$initiated = false;\n        });\n    }\n\n    /**\n     * Updates the system by one tick update.\n     * @param {object} $parameters The given parameters.\n     * @param {Stage} $parameters.$stage The stage on which to execute the system.\n     * @param {number} $parameters.$timetick The tick duration (in ms).\n     * @public\n     */\n    tick({$stage, $timetick}) {\n\n        if (this.$initiated === false) {\n\n            this.initiate();\n        }\n\n        this.onTick({$stage, $timetick});\n    }\n}\n\nexport {\n\n    System\n};\n\nexport default System;\n","import {TimelineKeyframe} from '../index.js';\n\n/**\n * Creates timelines.\n *\n * @example\n *\n * const timeline = new Timeline(keyframes);\n * timeline.seekTimecode(0);\n * timeline.tick(timetick);\n */\nclass Timeline {\n\n    /**\n     * Stores the keyframes.\n     * @type {Array<TimelineKeyframe>}\n     * @private\n     */\n    $keyframes;\n\n    /**\n     * Stores the timecode.\n     * @type {number}\n     * @private\n     */\n    $timecode;\n\n    /**\n     * Gets the timecode.\n     * @type {number}\n     * @public\n     */\n    get timecode() {\n\n        return this.$timecode;\n    }\n\n    /**\n     * Creates a new timeline.\n     * @param {Array<TimelineKeyframe>} [$keyframes] The keyframes.\n     */\n    constructor($keyframes = []) {\n\n        this.$keyframes = [...$keyframes].sort(($a, $b) => ($a.timecode - $b.timecode));\n\n        this.$timecode = 0;\n    }\n\n    /**\n     * Seeks to the given name.\n     * @param {string} $name The name of the keyframe to seek to.\n     * @returns {this}\n     * @public\n     */\n    seekName($name) {\n\n        const result = this.$keyframes.find(($keyframe) => ($keyframe.name === $name));\n\n        if (typeof result !== 'undefined') {\n\n            this.seekTimecode(result.timecode);\n        }\n\n        return this;\n    }\n\n    /**\n     * Seeks to the given timecode.\n     * @param {number} $timecode The timecode to seek to (in ms).\n     * @returns {this}\n     * @public\n     */\n    seekTimecode($timecode) {\n\n        this.$timecode = $timecode;\n\n        this.$keyframes.forEach(($keyframe) => {\n\n            if ($keyframe.timecode !== this.$timecode) {\n\n                return;\n            }\n\n            $keyframe.onEnter(this);\n        });\n\n        return this;\n    }\n\n    /**\n     * Updates the timeline by one tick update.\n     * @param {number} $timetick The tick duration (in ms).\n     * @returns {this}\n     * @public\n     */\n    tick($timetick) {\n\n        if ($timetick === 0) {\n\n            return this;\n        }\n\n        const previous = this.$timecode;\n\n        this.$timecode += $timetick;\n\n        const current = this.$timecode;\n\n        this.$keyframes.forEach(($keyframe) => {\n\n            if ($keyframe.timecode <= previous) {\n\n                return;\n            }\n\n            if ($keyframe.timecode > current) {\n\n                return;\n            }\n\n            $keyframe.onEnter(this);\n        });\n\n        return this;\n    }\n}\n\nexport {\n\n    Timeline\n};\n\nexport default Timeline;\n","import {Timeline} from '../index.js';\n\n/**\n * Creates timeline keyframes.\n *\n * @example\n *\n * // minimal\n * const keyframe = new TimelineKeyframe({$onEnter, $timecode});\n *\n * @example\n *\n * // full\n * const keyframe = new TimelineKeyframe({$name, $onEnter, $timecode});\n */\nclass TimelineKeyframe {\n\n    /**\n     * @callback TypeHandlerEnter A handler to execute when entering a keyframe.\n     * @param {Timeline} $timeline The reference timeline.\n     * @returns {void}\n     * @protected\n     *\n     * @memberof TimelineKeyframe\n     */\n\n    /**\n     * Stores the name.\n     * @type {string}\n     * @private\n     */\n    $name;\n\n    /**\n     * Stores the keyframe entering handler.\n     * @type {TypeHandlerEnter}\n     * @private\n     */\n    $onEnter;\n\n    /**\n     * Stores the timecode.\n     * @type {number}\n     * @private\n     */\n    $timecode;\n\n    /**\n     * Gets the name.\n     * @type {string}\n     * @public\n     */\n    get name() {\n\n        return this.$name;\n    }\n\n    /**\n     * Gets the keyframe entering handler.\n     * @type {TypeHandlerEnter}\n     * @public\n     */\n    get onEnter() {\n\n        return this.$onEnter;\n    }\n\n    /**\n     * Gets the timecode.\n     * @type {number}\n     * @public\n     */\n    get timecode() {\n\n        return this.$timecode;\n    }\n\n    /**\n     * Creates a new timeline keyframe.\n     * @param {object} $parameters The given parameters.\n     * @param {string} [$parameters.$name] The name.\n     * @param {TypeHandlerEnter} $parameters.$onEnter The keyframe entering handler.\n     * @param {number} $parameters.$timecode The timecode.\n     */\n    constructor({$name, $onEnter, $timecode}) {\n\n        this.$name = $name;\n        this.$onEnter = $onEnter;\n        this.$timecode = $timecode;\n    }\n}\n\nexport {\n\n    TimelineKeyframe\n};\n\nexport default TimelineKeyframe;\n","// 'ESLint' configuration\n/* global TypeGeneric */\n\n/**\n * @module UTILS\n */\n\n/**\n * Deduplicates the items of the given array (a new array is created).\n * @template {any} TypeGeneric The generic type of the values of the array.\n * @param {Array<TypeGeneric>} $array The array.\n * @returns {Array<TypeGeneric>}\n *\n * @memberof module:UTILS\n */\nfunction deduplicate($array) {\n\n    return Array.from(new Set($array));\n}\n\n/**\n * Extracts the given item from the given array.\n * @template {any} TypeGeneric The generic type of the values of the array.\n * @param {TypeGeneric} $item The item to remove.\n * @param {Array<TypeGeneric>} $array The array.\n * @returns {Array<TypeGeneric>}\n *\n * @memberof module:UTILS\n */\nfunction extract($item, $array) {\n\n    const index = $array.indexOf($item);\n\n    if (index === -1) {\n\n        return [];\n    }\n\n    return $array.splice(index, 1);\n}\n\n/**\n * Resolves when the browser is ready to perform an animation frame request.\n * @returns {Promise<number>}\n *\n * @memberof module:UTILS\n */\nfunction frame() {\n\n    /**\n     * @type {Promise<number>}\n     */\n    const promise = new Promise(($resolve) => {\n\n        window.requestAnimationFrame($resolve);\n    });\n\n    return promise;\n}\n\n/**\n * Resolves when the user has interacted at least once since page load.\n * @returns {Promise<void>}\n *\n * @memberof module:UTILS\n */\nfunction ready() {\n\n    /**\n     * @type {Promise<void>}\n     */\n    const promise = new Promise(($resolve) => {\n\n        /**\n         * @type {number}\n         */\n        let id;\n\n        const check = () => {\n\n            if (navigator.userActivation.hasBeenActive === false) {\n\n                id = window.requestAnimationFrame(check);\n\n                return;\n            }\n\n            window.cancelAnimationFrame(id);\n\n            $resolve();\n        };\n\n        id = window.requestAnimationFrame(check);\n    });\n\n    return promise;\n}\n\n/**\n * Resolves when the given delay has passed.\n * @param {number} $delay The delay (in ms).\n * @returns {Promise<void>}\n *\n * @memberof module:UTILS\n */\nfunction sleep($delay) {\n\n    /**\n     * @type {Promise<void>}\n     */\n    const promise = new Promise(($resolve) => {\n\n        window.setTimeout($resolve, $delay);\n    });\n\n    return promise;\n}\n\n/**\n * Gets a new UUID.\n * @returns {string}\n *\n * @memberof module:UTILS\n */\nfunction uuid() {\n\n    return window.crypto.randomUUID();\n}\n\nexport {\n\n    deduplicate,\n    extract,\n    frame,\n    ready,\n    sleep,\n    uuid\n};\n","import {MATHEMATICS} from '../index.js';\n\n/**\n * Creates two-dimensional vectors.\n *\n * @example\n *\n * // without chaining\n * const vector = new Vector2(3, 2);\n * vector.add(new Vector2(1, 0));\n *\n * @example\n *\n * // with chaining\n * const vector = new Vector2(3, 2).add(new Vector2(1, 0));\n */\nclass Vector2 {\n\n    /**\n     * Stores the x component.\n     * @type {number}\n     * @private\n     */\n    $x;\n\n    /**\n     * Stores the y component.\n     * @type {number}\n     * @private\n     */\n    $y;\n\n    /**\n     * Gets the x component.\n     * @type {number}\n     * @public\n     */\n    get x() {\n\n        return this.$x;\n    }\n\n    /**\n     * Gets the y component.\n     * @type {number}\n     * @public\n     */\n    get y() {\n\n        return this.$y;\n    }\n\n    /**\n     * Creates a new two-dimensional vector.\n     * @param {number} $x The x component of the vector to create.\n     * @param {number} $y The y component of the vector to create.\n     */\n    constructor($x, $y) {\n\n        this.$x = $x;\n        this.$y = $y;\n    }\n\n    /**\n     * Creates a new vector from the given vector.\n     * @param {Vector2} $vector The given vector.\n     * @returns {Vector2}\n     * @public\n     * @static\n     */\n    static from($vector) {\n\n        return $vector.clone();\n    }\n\n    /**\n     * Adds the given vector.\n     * @param {Vector2} $vector The vector to add.\n     * @returns {this}\n     * @public\n     */\n    add($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = x + $vector.x;\n        this.$y = y + $vector.y;\n\n        return this;\n    }\n\n    /**\n     * Clones the vector.\n     * @returns {Vector2}\n     * @public\n     */\n    clone() {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        return new Vector2(x, y);\n    }\n\n    /**\n     * Checks the equality with the given vector.\n     * @param {Vector2} $vector The vector to check with.\n     * @returns {boolean}\n     * @public\n     */\n    equal($vector) {\n\n        return this.$x === $vector.x\n        && this.$y === $vector.y;\n    }\n\n    /**\n     * Gets the length of the vector.\n     * @returns {number}\n     * @public\n     */\n    length() {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        return Math.sqrt(x * x + y * y);\n    }\n\n    /**\n     * Multiplies with the given vector.\n     * @param {Vector2} $vector The vector to multiply with.\n     * @returns {this}\n     * @public\n     */\n    multiply($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = x * $vector.x;\n        this.$y = y * $vector.y;\n\n        return this;\n    }\n\n    /**\n     * Negates the vector.\n     * @returns {this}\n     * @public\n     */\n    negate() {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = - x;\n        this.$y = - y;\n\n        return this;\n    }\n\n    /**\n     * Normalizes the vector.\n     * @returns {this}\n     * @public\n     */\n    normalize() {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        let length = x * x + y * y;\n\n        if (length > 0) {\n\n            length = 1 / Math.sqrt(length);\n        }\n\n        this.$x = x * length;\n        this.$y = y * length;\n\n        return this;\n    }\n\n    /**\n     * Rotates the vector by the given angle.\n     * @param {number} $angle The angle of rotation to apply (in degrees) (clockwise).\n     * @returns {this}\n     * @public\n     */\n    rotate($angle) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        const radians = $angle * MATHEMATICS.RADIANS;\n\n        const cosine = Math.cos(radians);\n        const sine = Math.sin(radians);\n\n        this.$x = x * cosine - y * sine;\n        this.$y = x * sine + y * cosine;\n\n        return this;\n    }\n\n    /**\n     * Scales the vector by the given scalar factor.\n     * @param {number} $factor The scalar factor to multiply with.\n     * @returns {this}\n     * @public\n     */\n    scale($factor) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = x * $factor;\n        this.$y = y * $factor;\n\n        return this;\n    }\n\n    /**\n     * Subtracts the given vector.\n     * @param {Vector2} $vector The vector to subtract.\n     * @returns {this}\n     * @public\n     */\n    subtract($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n\n        this.$x = x - $vector.x;\n        this.$y = y - $vector.y;\n\n        return this;\n    }\n}\n\nexport {\n\n    Vector2\n};\n\nexport default Vector2;\n","import {Quaternion} from '../index.js';\n\n/**\n * Creates three-dimensional vectors.\n *\n * @example\n *\n * // without chaining\n * const vector = new Vector3(3, 2, 1);\n * vector.add(new Vector3(1, 0, -1));\n *\n * @example\n *\n * // with chaining\n * const vector = new Vector3(3, 2, 1).add(new Vector3(1, 0, -1));\n */\nclass Vector3 {\n\n    /**\n     * Stores the x component.\n     * @type {number}\n     * @private\n     */\n    $x;\n\n    /**\n     * Stores the y component.\n     * @type {number}\n     * @private\n     */\n    $y;\n\n    /**\n     * Stores the z component.\n     * @type {number}\n     * @private\n     */\n    $z;\n\n    /**\n     * Gets the x component.\n     * @type {number}\n     * @public\n     */\n    get x() {\n\n        return this.$x;\n    }\n\n    /**\n     * Gets the y component.\n     * @type {number}\n     * @public\n     */\n    get y() {\n\n        return this.$y;\n    }\n\n    /**\n     * Gets the z component.\n     * @type {number}\n     * @public\n     */\n    get z() {\n\n        return this.$z;\n    }\n\n    /**\n     * Creates a new three-dimensional vector.\n     * @param {number} $x The x component of the vector to create.\n     * @param {number} $y The y component of the vector to create.\n     * @param {number} $z The z component of the vector to create.\n     */\n    constructor($x, $y, $z) {\n\n        this.$x = $x;\n        this.$y = $y;\n        this.$z = $z;\n    }\n\n    /**\n     * Creates a new vector from the given vector.\n     * @param {Vector3} $vector The given vector.\n     * @returns {Vector3}\n     * @public\n     * @static\n     */\n    static from($vector) {\n\n        return $vector.clone();\n    }\n\n    /**\n     * Adds the given vector.\n     * @param {Vector3} $vector The vector to add.\n     * @returns {this}\n     * @public\n     */\n    add($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = x + $vector.x;\n        this.$y = y + $vector.y;\n        this.$z = z + $vector.z;\n\n        return this;\n    }\n\n    /**\n     * Clones the vector.\n     * @returns {Vector3}\n     * @public\n     */\n    clone() {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        return new Vector3(x, y, z);\n    }\n\n    /**\n     * Checks the equality with the given vector.\n     * @param {Vector3} $vector The vector to check with.\n     * @returns {boolean}\n     * @public\n     */\n    equal($vector) {\n\n        return this.$x === $vector.x\n        && this.$y === $vector.y\n        && this.$z === $vector.z;\n    }\n\n    /**\n     * Gets the length of the vector.\n     * @returns {number}\n     * @public\n     */\n    length() {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        return Math.sqrt(x * x + y * y + z * z);\n    }\n\n    /**\n     * Multiplies with the given vector.\n     * @param {Vector3} $vector The vector to multiply with.\n     * @returns {this}\n     * @public\n     */\n    multiply($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = x * $vector.x;\n        this.$y = y * $vector.y;\n        this.$z = z * $vector.z;\n\n        return this;\n    }\n\n    /**\n     * Negates the vector.\n     * @returns {this}\n     * @public\n     */\n    negate() {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = - x;\n        this.$y = - y;\n        this.$z = - z;\n\n        return this;\n    }\n\n    /**\n     * Normalizes the vector.\n     * @returns {this}\n     * @public\n     */\n    normalize() {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        let length = x * x + y * y + z * z;\n\n        if (length > 0) {\n\n            length = 1 / Math.sqrt(length);\n        }\n\n        this.$x = x * length;\n        this.$y = y * length;\n        this.$z = z * length;\n\n        return this;\n    }\n\n    /**\n     * Rotates the vector.\n     * @param {Quaternion} $quaternion The rotation to apply.\n     * @returns {this}\n     * @public\n     */\n    rotate($quaternion) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        const xq = $quaternion.x;\n        const yq = $quaternion.y;\n        const zq = $quaternion.z;\n        const wq = $quaternion.w;\n\n        let xu = yq * z - zq * y;\n        let yu = zq * x - xq * z;\n        let zu = xq * y - yq * x;\n\n        let xv = yq * zu - zq * yu;\n        let yv = zq * xu - xq * zu;\n        let zv = xq * yu - yq * xu;\n\n        const w = wq * 2;\n\n        xu *= w;\n        yu *= w;\n        zu *= w;\n\n        xv *= 2;\n        yv *= 2;\n        zv *= 2;\n\n        this.$x = x + xu + xv;\n        this.$y = y + yu + yv;\n        this.$z = z + zu + zv;\n\n        return this;\n    }\n\n    /**\n     * Scales the vector by the given scalar factor.\n     * @param {number} $factor The scalar factor to multiply with.\n     * @returns {this}\n     * @public\n     */\n    scale($factor) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = x * $factor;\n        this.$y = y * $factor;\n        this.$z = z * $factor;\n\n        return this;\n    }\n\n    /**\n     * Subtracts the given vector.\n     * @param {Vector3} $vector The vector to subtract.\n     * @returns {this}\n     * @public\n     */\n    subtract($vector) {\n\n        const x = this.$x;\n        const y = this.$y;\n        const z = this.$z;\n\n        this.$x = x - $vector.x;\n        this.$y = y - $vector.y;\n        this.$z = z - $vector.z;\n\n        return this;\n    }\n}\n\nexport {\n\n    Vector3\n};\n\nexport default Vector3;\n","/**\n * Creates vibrations.\n *\n * @example\n *\n * const vibration = new Vibration({\n *\n *     $duration: 200,\n *     $intensityFrequencyHigh: 0.8,\n *     $intensityFrequencyLow: 0.2\n * });\n */\nclass Vibration {\n\n    /**\n     * Stores the duration.\n     * @type {number}\n     * @private\n     */\n    $duration;\n\n    /**\n     * Stores the intensity of the high-frequency (weak) rumble motors.\n     * @type {number}\n     * @private\n     */\n    $intensityFrequencyHigh;\n\n    /**\n     * Stores the intensity of the low-frequency (strong) rumble motors.\n     * @type {number}\n     * @private\n     */\n    $intensityFrequencyLow;\n\n    /**\n     * Gets the duration (in ms).\n     * @type {number}\n     * @public\n     */\n    get duration() {\n\n        return this.$duration;\n    }\n\n    /**\n     * Gets the intensity of the high-frequency (weak) rumble motors (with value in [0, 1] range).\n     * @type {number}\n     * @public\n     */\n    get intensityFrequencyHigh() {\n\n        return this.$intensityFrequencyHigh;\n    }\n\n    /**\n     * Gets the intensity of the low-frequency (strong) rumble motors (with value in [0, 1] range).\n     * @type {number}\n     * @public\n     */\n    get intensityFrequencyLow() {\n\n        return this.$intensityFrequencyLow;\n    }\n\n    /**\n     * Creates a new vibration.\n     * @param {object} $parameters The given parameters.\n     * @param {number} $parameters.$duration The duration (in ms).\n     * @param {number} $parameters.$intensityFrequencyHigh The intensity of the high-frequency (weak) rumble motors (with value in [0, 1] range).\n     * @param {number} $parameters.$intensityFrequencyLow The intensity of the low-frequency (strong) rumble motors (with value in [0, 1] range).\n     */\n    constructor({$duration, $intensityFrequencyHigh, $intensityFrequencyLow}) {\n\n        this.$duration = $duration;\n        this.$intensityFrequencyHigh = $intensityFrequencyHigh;\n        this.$intensityFrequencyLow = $intensityFrequencyLow;\n    }\n}\n\nexport {\n\n    Vibration\n};\n\nexport default Vibration;\n","import {EVENT_TYPES, Vibration} from '../index.js';\n\n/**\n * Creates gamepad events.\n *\n * @example\n *\n * const event = new EventGamepad(type, code, vibration);\n */\nclass EventGamepad extends Event {\n\n    /**\n     * Stores the event code.\n     * @type {string}\n     * @private\n     */\n    $code;\n\n    /**\n     * Stores the vibration.\n     * @type {Vibration}\n     * @private\n     */\n    $vibration;\n\n    /**\n     * Gets the event code.\n     * @type {string}\n     * @public\n     */\n    get code() {\n\n        return this.$code;\n    }\n\n    /**\n     * Gets the vibration.\n     * @type {Vibration}\n     * @public\n     */\n    get vibration() {\n\n        return this.$vibration;\n    }\n\n    /**\n     * Creates a new gamepad event.\n     * @param {(EVENT_TYPES.GAMEPAD.GAMEPAD_VIBRATE)} $type The event type.\n     * @param {string} $code The event code.\n     * @param {Vibration} $vibration The vibration.\n     */\n    constructor($type, $code, $vibration) {\n\n        super($type);\n\n        this.$code = $code;\n        this.$vibration = $vibration;\n    }\n}\n\nexport {\n\n    EventGamepad\n};\n\nexport default EventGamepad;\n","import {EVENT_TYPES} from '../index.js';\n\n/**\n * Creates gamepad analog events.\n *\n * @example\n *\n * const event = new EventGamepadAnalog(type, code, value);\n */\nclass EventGamepadAnalog extends Event {\n\n    /**\n     * Stores the event code.\n     * @type {string}\n     * @private\n     */\n    $code;\n\n    /**\n     * Stores the analog value.\n     * @type {number}\n     * @private\n     */\n    $value;\n\n    /**\n     * Gets the event code.\n     * @type {string}\n     * @public\n     */\n    get code() {\n\n        return this.$code;\n    }\n\n    /**\n     * Gets the analog value.\n     * @type {number}\n     * @public\n     */\n    get value() {\n\n        return this.$value;\n    }\n\n    /**\n     * Creates a new gamepad analog event.\n     * @param {(EVENT_TYPES.GAMEPAD.GAMEPAD_ANALOG)} $type The event type.\n     * @param {string} $code The event code.\n     * @param {number} $value The analog value.\n     */\n    constructor($type, $code, $value) {\n\n        super($type);\n\n        this.$code = $code;\n        this.$value = $value;\n    }\n}\n\nexport {\n\n    EventGamepadAnalog\n};\n\nexport default EventGamepadAnalog;\n","import {EVENT_TYPES} from '../index.js';\n\n/**\n * Creates gamepad digital events.\n *\n * @example\n *\n * const event = new EventGamepadDigital(type, code);\n */\nclass EventGamepadDigital extends Event {\n\n    /**\n     * Stores the event code.\n     * @type {string}\n     * @private\n     */\n    $code;\n\n    /**\n     * Gets the event code.\n     * @type {string}\n     * @public\n     */\n    get code() {\n\n        return this.$code;\n    }\n\n    /**\n     * Creates a new gamepad digital event.\n     * @param {(EVENT_TYPES.GAMEPAD.GAMEPAD_CONNECT | EVENT_TYPES.GAMEPAD.GAMEPAD_DOWN | EVENT_TYPES.GAMEPAD.GAMEPAD_UP | EVENT_TYPES.GAMEPAD.GAMEPAD_VIBRATE)} $type The event type.\n     * @param {string} $code The event code.\n     */\n    constructor($type, $code) {\n\n        super($type);\n\n        this.$code = $code;\n    }\n}\n\nexport {\n\n    EventGamepadDigital\n};\n\nexport default EventGamepadDigital;\n","import {EVENT_TYPES} from '../index.js';\n\n/**\n * Creates gravity analog events.\n *\n * @example\n *\n * const event = new EventGravityAnalog(type, code, value);\n */\nclass EventGravityAnalog extends Event {\n\n    /**\n     * Stores the event code.\n     * @type {string}\n     * @private\n     */\n    $code;\n\n    /**\n     * Stores the analog value.\n     * @type {number}\n     * @private\n     */\n    $value;\n\n    /**\n     * Gets the event code.\n     * @type {string}\n     * @public\n     */\n    get code() {\n\n        return this.$code;\n    }\n\n    /**\n     * Gets the analog value.\n     * @type {number}\n     * @public\n     */\n    get value() {\n\n        return this.$value;\n    }\n\n    /**\n     * Creates a new gravity analog event.\n     * @param {(EVENT_TYPES.GRAVITY.GRAVITY_ANALOG)} $type The event type.\n     * @param {string} $code The event code.\n     * @param {number} $value The analog value.\n     */\n    constructor($type, $code, $value) {\n\n        super($type);\n\n        this.$code = $code;\n        this.$value = $value;\n    }\n}\n\nexport {\n\n    EventGravityAnalog\n};\n\nexport default EventGravityAnalog;\n","import {EVENT_TYPES} from '../index.js';\n\n/**\n * Creates gravity digital events.\n *\n * @example\n *\n * const event = new EventGravityDigital(type, code);\n */\nclass EventGravityDigital extends Event {\n\n    /**\n     * Stores the event code.\n     * @type {string}\n     * @private\n     */\n    $code;\n\n    /**\n     * Gets the event code.\n     * @type {string}\n     * @public\n     */\n    get code() {\n\n        return this.$code;\n    }\n\n    /**\n     * Creates a new gravity digital event.\n     * @param {(EVENT_TYPES.GRAVITY.GRAVITY_DOWN | EVENT_TYPES.GRAVITY.GRAVITY_UP)} $type The event type.\n     * @param {string} $code The event code.\n     */\n    constructor($type, $code) {\n\n        super($type);\n\n        this.$code = $code;\n    }\n}\n\nexport {\n\n    EventGravityDigital\n};\n\nexport default EventGravityDigital;\n","import {EVENT_TYPES} from '../index.js';\n\n/**\n * Creates gyroscope analog events.\n *\n * @example\n *\n * const event = new EventGyroscopeAnalog(type, code, value);\n */\nclass EventGyroscopeAnalog extends Event {\n\n    /**\n     * Stores the event code.\n     * @type {string}\n     * @private\n     */\n    $code;\n\n    /**\n     * Stores the analog value.\n     * @type {number}\n     * @private\n     */\n    $value;\n\n    /**\n     * Gets the event code.\n     * @type {string}\n     * @public\n     */\n    get code() {\n\n        return this.$code;\n    }\n\n    /**\n     * Gets the analog value.\n     * @type {number}\n     * @public\n     */\n    get value() {\n\n        return this.$value;\n    }\n\n    /**\n     * Creates a new gyroscope analog event.\n     * @param {(EVENT_TYPES.GYROSCOPE.GYROSCOPE_ANALOG)} $type The event type.\n     * @param {string} $code The event code.\n     * @param {number} $value The analog value.\n     */\n    constructor($type, $code, $value) {\n\n        super($type);\n\n        this.$code = $code;\n        this.$value = $value;\n    }\n}\n\nexport {\n\n    EventGyroscopeAnalog\n};\n\nexport default EventGyroscopeAnalog;\n","import {EVENT_TYPES} from '../index.js';\n\n/**\n * Creates gyroscope digital events.\n *\n * @example\n *\n * const event = new EventGyroscopeDigital(type, code);\n */\nclass EventGyroscopeDigital extends Event {\n\n    /**\n     * Stores the event code.\n     * @type {string}\n     * @private\n     */\n    $code;\n\n    /**\n     * Gets the event code.\n     * @type {string}\n     * @public\n     */\n    get code() {\n\n        return this.$code;\n    }\n\n    /**\n     * Creates a new gyroscope digital event.\n     * @param {(EVENT_TYPES.GYROSCOPE.GYROSCOPE_DOWN | EVENT_TYPES.GYROSCOPE.GYROSCOPE_UP)} $type The event type.\n     * @param {string} $code The event code.\n     */\n    constructor($type, $code) {\n\n        super($type);\n\n        this.$code = $code;\n    }\n}\n\nexport {\n\n    EventGyroscopeDigital\n};\n\nexport default EventGyroscopeDigital;\n","import {EVENT_TYPES} from '../index.js';\n\n/**\n * Creates pointer analog events.\n *\n * @example\n *\n * const event = new EventPointerAnalog(type, code, value);\n */\nclass EventPointerAnalog extends Event {\n\n    /**\n     * Stores the event code.\n     * @type {string}\n     * @private\n     */\n    $code;\n\n    /**\n     * Stores the analog value.\n     * @type {number}\n     * @private\n     */\n    $value;\n\n    /**\n     * Gets the event code.\n     * @type {string}\n     * @public\n     */\n    get code() {\n\n        return this.$code;\n    }\n\n    /**\n     * Gets the analog value.\n     * @type {number}\n     * @public\n     */\n    get value() {\n\n        return this.$value;\n    }\n\n    /**\n     * Creates a new pointer analog event.\n     * @param {(EVENT_TYPES.POINTER.POINTER_ANALOG)} $type The event type.\n     * @param {string} $code The event code.\n     * @param {number} $value The analog value.\n     */\n    constructor($type, $code, $value) {\n\n        super($type);\n\n        this.$code = $code;\n        this.$value = $value;\n    }\n}\n\nexport {\n\n    EventPointerAnalog\n};\n\nexport default EventPointerAnalog;\n","import {EVENT_TYPES} from '../index.js';\n\n/**\n * Creates pointer digital events.\n *\n * @example\n *\n * const event = new EventPointerDigital(type, code);\n */\nclass EventPointerDigital extends Event {\n\n    /**\n     * Stores the event code.\n     * @type {string}\n     * @private\n     */\n    $code;\n\n    /**\n     * Gets the event code.\n     * @type {string}\n     * @public\n     */\n    get code() {\n\n        return this.$code;\n    }\n\n    /**\n     * Creates a new pointer digital event.\n     * @param {(EVENT_TYPES.POINTER.POINTER_DOWN | EVENT_TYPES.POINTER.POINTER_UP)} $type The event type.\n     * @param {string} $code The event code.\n     */\n    constructor($type, $code) {\n\n        super($type);\n\n        this.$code = $code;\n    }\n}\n\nexport {\n\n    EventPointerDigital\n};\n\nexport default EventPointerDigital;\n","import {EVENT_CODES, EVENT_TYPES, EventGamepad, EventGamepadAnalog, EventGamepadDigital} from '../index.js';\n\n/**\n * The ordered list of the axes event codes of the gamepad.\n * @type {Array<Array<string>>}\n * @constant\n * @private\n */\nconst $GAMEPAD_AXES = [\n\n    [EVENT_CODES.GAMEPAD_STANDARD.STICK_LEFT_LEFT, EVENT_CODES.GAMEPAD_STANDARD.STICK_LEFT_RIGHT],\n    [EVENT_CODES.GAMEPAD_STANDARD.STICK_LEFT_UP, EVENT_CODES.GAMEPAD_STANDARD.STICK_LEFT_DOWN],\n    [EVENT_CODES.GAMEPAD_STANDARD.STICK_RIGHT_LEFT, EVENT_CODES.GAMEPAD_STANDARD.STICK_RIGHT_RIGHT],\n    [EVENT_CODES.GAMEPAD_STANDARD.STICK_RIGHT_UP, EVENT_CODES.GAMEPAD_STANDARD.STICK_RIGHT_DOWN]\n];\n\n/**\n * The ordered list of the buttons event codes of the gamepad.\n * @type {Array<string>}\n * @constant\n * @private\n */\nconst $GAMEPAD_BUTTONS = [\n\n    EVENT_CODES.GAMEPAD_STANDARD.CLUSTER_RIGHT_BUTTON_BOTTOM,\n    EVENT_CODES.GAMEPAD_STANDARD.CLUSTER_RIGHT_BUTTON_RIGHT,\n    EVENT_CODES.GAMEPAD_STANDARD.CLUSTER_RIGHT_BUTTON_LEFT,\n    EVENT_CODES.GAMEPAD_STANDARD.CLUSTER_RIGHT_BUTTON_TOP,\n    EVENT_CODES.GAMEPAD_STANDARD.CLUSTER_FRONT_BUTTON_TOP_LEFT,\n    EVENT_CODES.GAMEPAD_STANDARD.CLUSTER_FRONT_BUTTON_TOP_RIGHT,\n    EVENT_CODES.GAMEPAD_STANDARD.CLUSTER_FRONT_BUTTON_BOTTOM_LEFT,\n    EVENT_CODES.GAMEPAD_STANDARD.CLUSTER_FRONT_BUTTON_BOTTOM_RIGHT,\n    EVENT_CODES.GAMEPAD_STANDARD.CLUSTER_CENTER_BUTTON_LEFT,\n    EVENT_CODES.GAMEPAD_STANDARD.CLUSTER_CENTER_BUTTON_RIGHT,\n    EVENT_CODES.GAMEPAD_STANDARD.STICK_LEFT_BUTTON,\n    EVENT_CODES.GAMEPAD_STANDARD.STICK_RIGHT_BUTTON,\n    EVENT_CODES.GAMEPAD_STANDARD.CLUSTER_LEFT_BUTTON_TOP,\n    EVENT_CODES.GAMEPAD_STANDARD.CLUSTER_LEFT_BUTTON_BOTTOM,\n    EVENT_CODES.GAMEPAD_STANDARD.CLUSTER_LEFT_BUTTON_LEFT,\n    EVENT_CODES.GAMEPAD_STANDARD.CLUSTER_LEFT_BUTTON_RIGHT,\n    EVENT_CODES.GAMEPAD_STANDARD.CLUSTER_CENTER_BUTTON_CENTER\n];\n\n/**\n * The threshold of the gampead axes.\n * @type {number}\n * @constant\n * @private\n */\nconst $THRESHOLD_GAMEPAD_AXES = 0.5;\n\n/**\n * Creates gamepad extensions.\n *\n * @example\n *\n * ExtensionGamepad.activate();\n */\nclass ExtensionGamepad {\n\n    /**\n     * Stores the activated status.\n     * @type {boolean}\n     * @private\n     * @static\n     */\n    static $activated = false;\n\n    /**\n     * Stores the index of the last connected gamepad.\n     * @type {number}\n     * @private\n     */\n    $indexLastConnected;\n\n    /**\n     * Stores the gamepad state.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n    $stateGamepad;\n\n    /**\n     * Stores the unloaded status.\n     * @type {boolean}\n     * @private\n     */\n    $unloaded;\n\n    /**\n     * Creates a new gamepad extension.\n     * @protected\n     */\n    constructor() {\n\n        this.$stateGamepad = {};\n        this.$unloaded = false;\n\n        [...$GAMEPAD_BUTTONS, ...$GAMEPAD_AXES.flat()].forEach(($code) => {\n\n            this.$stateGamepad[$code] = false;\n        });\n\n        window.addEventListener(EVENT_TYPES.NATIVE.BEFORE_UNLOAD, this.$onBeforeUnload.bind(this));\n\n        window.addEventListener(EVENT_TYPES.NATIVE.GAMEPAD_CONNECTED, this.$onConnect.bind(this));\n        window.addEventListener(EVENT_TYPES.NATIVE.GAMEPAD_DISCONNECTED, this.$onDisconnect.bind(this));\n\n        window.addEventListener(EVENT_TYPES.GAMEPAD.GAMEPAD_VIBRATE, this.$onVibrate.bind(this));\n\n        window.requestAnimationFrame(this.$update.bind(this));\n    }\n\n    /**\n     * Activates the extension.\n     * @public\n     * @static\n     */\n    static activate() {\n\n        if (ExtensionGamepad.$activated === true) {\n\n            return;\n        }\n\n        new ExtensionGamepad();\n\n        ExtensionGamepad.$activated = true;\n    }\n\n    /**\n     * Called when the scope is about to be unloaded.\n     * @private\n     */\n    $onBeforeUnload() {\n\n        this.$unloaded = true;\n\n        const gamepads = navigator.getGamepads();\n        const gamepad = gamepads[this.$indexLastConnected];\n\n        if (typeof gamepad === 'undefined') {\n\n            return;\n        }\n\n        if (typeof gamepad.vibrationActuator === 'undefined') {\n\n            return;\n        }\n\n        gamepad.vibrationActuator.reset();\n    }\n\n    /**\n     * Called when the gamepad is connected.\n     * @param {GamepadEvent} $event The native gamepad connected event.\n     * @private\n     */\n    $onConnect($event) {\n\n        if ($event.gamepad.mapping !== 'standard') {\n\n            return;\n        }\n\n        Object.entries(this.$stateGamepad).forEach(([$code, $activated]) => {\n\n            if ($activated === true) {\n\n                this.$stateGamepad[$code] = false;\n\n                window.dispatchEvent(new EventGamepadDigital(EVENT_TYPES.GAMEPAD.GAMEPAD_UP, $code));\n            }\n        });\n\n        this.$indexLastConnected = $event.gamepad.index;\n\n        window.dispatchEvent(new EventGamepadDigital(EVENT_TYPES.GAMEPAD.GAMEPAD_CONNECT, EVENT_CODES.GAMEPAD_STANDARD.CONNECTED));\n    }\n\n    /**\n     * Called when the gamepad is disconnected.\n     * @param {GamepadEvent} $event The native gamepad disconnected event.\n     * @private\n     */\n    $onDisconnect($event) {\n\n        if ($event.gamepad.index !== this.$indexLastConnected) {\n\n            return;\n        }\n\n        Object.entries(this.$stateGamepad).forEach(([$code, $activated]) => {\n\n            if ($activated === true) {\n\n                this.$stateGamepad[$code] = false;\n\n                window.dispatchEvent(new EventGamepadDigital(EVENT_TYPES.GAMEPAD.GAMEPAD_UP, $code));\n            }\n        });\n\n        this.$indexLastConnected = undefined;\n\n        window.dispatchEvent(new EventGamepadDigital(EVENT_TYPES.GAMEPAD.GAMEPAD_CONNECT, EVENT_CODES.GAMEPAD_STANDARD.DISCONNECTED));\n    }\n\n    /**\n     * Called when a gamepad vibration is needed.\n     * @param {Event} $event The gamepad vibrate event.\n     * @private\n     */\n    $onVibrate($event) {\n\n        if (this.$unloaded === true) {\n\n            return;\n        }\n\n        const gamepads = navigator.getGamepads();\n        const gamepad = gamepads[this.$indexLastConnected];\n\n        if (typeof gamepad === 'undefined') {\n\n            return;\n        }\n\n        if (typeof gamepad.vibrationActuator === 'undefined') {\n\n            return;\n        }\n\n        if ($event instanceof EventGamepadDigital\n        && $event.code === EVENT_CODES.GAMEPAD_STANDARD.VIBRATE_END) {\n\n            gamepad.vibrationActuator.reset();\n\n            return;\n        }\n\n        if ($event instanceof EventGamepad\n        && $event.code === EVENT_CODES.GAMEPAD_STANDARD.VIBRATE_START) {\n\n            gamepad.vibrationActuator.playEffect('dual-rumble', {\n\n                duration: $event.vibration.duration,\n                startDelay: 0,\n                strongMagnitude: $event.vibration.intensityFrequencyLow,\n                weakMagnitude: $event.vibration.intensityFrequencyHigh\n            });\n\n            return;\n        }\n    }\n\n    /**\n     * Updates the state of the gamepad.\n     * @private\n     */\n    $update() {\n\n        const gamepads = navigator.getGamepads();\n        const gamepad = gamepads[this.$indexLastConnected];\n\n        if (gamepad instanceof Gamepad) {\n\n            $GAMEPAD_BUTTONS.forEach(($button, $index) => {\n\n                const button = gamepad.buttons[$index];\n\n                if (button.pressed === true) {\n\n                    if (this.$stateGamepad[$button] === false) {\n\n                        this.$stateGamepad[$button] = true;\n                    }\n\n                    window.dispatchEvent(new EventGamepadDigital(EVENT_TYPES.GAMEPAD.GAMEPAD_DOWN, $button));\n                    window.dispatchEvent(new EventGamepadAnalog(EVENT_TYPES.GAMEPAD.GAMEPAD_ANALOG, $button, button.value));\n                }\n\n                else {\n\n                    if (this.$stateGamepad[$button] === true) {\n\n                        this.$stateGamepad[$button] = false;\n                        window.dispatchEvent(new EventGamepadDigital(EVENT_TYPES.GAMEPAD.GAMEPAD_UP, $button));\n                    }\n                }\n            });\n\n            gamepad.axes.forEach(($direction, $index) => {\n\n                const [axeMinimum, axeMaximum] = $GAMEPAD_AXES[$index];\n\n                if ($direction <= - $THRESHOLD_GAMEPAD_AXES) {\n\n                    if (this.$stateGamepad[axeMaximum] === true) {\n\n                        this.$stateGamepad[axeMaximum] = false;\n                        window.dispatchEvent(new EventGamepadDigital(EVENT_TYPES.GAMEPAD.GAMEPAD_UP, axeMaximum));\n                    }\n\n                    this.$stateGamepad[axeMinimum] = true;\n                    window.dispatchEvent(new EventGamepadDigital(EVENT_TYPES.GAMEPAD.GAMEPAD_DOWN, axeMinimum));\n                    window.dispatchEvent(new EventGamepadAnalog(EVENT_TYPES.GAMEPAD.GAMEPAD_ANALOG, axeMinimum, ($direction - (Math.sign($direction) * $THRESHOLD_GAMEPAD_AXES)) / (1 - $THRESHOLD_GAMEPAD_AXES)));\n                }\n\n                else if ($direction >= $THRESHOLD_GAMEPAD_AXES) {\n\n                    if (this.$stateGamepad[axeMinimum] === true) {\n\n                        this.$stateGamepad[axeMinimum] = false;\n                        window.dispatchEvent(new EventGamepadDigital(EVENT_TYPES.GAMEPAD.GAMEPAD_UP, axeMinimum));\n                    }\n\n                    this.$stateGamepad[axeMaximum] = true;\n                    window.dispatchEvent(new EventGamepadDigital(EVENT_TYPES.GAMEPAD.GAMEPAD_DOWN, axeMaximum));\n                    window.dispatchEvent(new EventGamepadAnalog(EVENT_TYPES.GAMEPAD.GAMEPAD_ANALOG, axeMaximum, ($direction - (Math.sign($direction) * $THRESHOLD_GAMEPAD_AXES)) / (1 - $THRESHOLD_GAMEPAD_AXES)));\n                }\n\n                else {\n\n                    if (this.$stateGamepad[axeMinimum] === true) {\n\n                        this.$stateGamepad[axeMinimum] = false;\n                        window.dispatchEvent(new EventGamepadDigital(EVENT_TYPES.GAMEPAD.GAMEPAD_UP, axeMinimum));\n                    }\n\n                    if (this.$stateGamepad[axeMaximum] === true) {\n\n                        this.$stateGamepad[axeMaximum] = false;\n                        window.dispatchEvent(new EventGamepadDigital(EVENT_TYPES.GAMEPAD.GAMEPAD_UP, axeMaximum));\n                    }\n                }\n            });\n        }\n\n        window.requestAnimationFrame(this.$update.bind(this));\n    }\n}\n\nexport {\n\n    ExtensionGamepad\n};\n\nexport default ExtensionGamepad;\n","import {Stage, System} from '../index.js';\n\n/**\n * Creates actor systems.\n *\n * @example\n *\n * const system = new SystemActor();\n * system.tick({$stage, $timetick});\n */\nclass SystemActor extends System {\n\n    /**\n     * Creates a new actor system.\n     */\n    constructor() {\n\n        super();\n    }\n\n    /**\n     * Called when the system is being updated by one tick update.\n     * @param {object} $parameters The given parameters.\n     * @param {Stage} $parameters.$stage The stage on which to execute the system.\n     * @param {number} $parameters.$timetick The tick duration (in ms).\n     * @public\n     */\n    onTick({$stage, $timetick}) {\n\n        $stage.actors.forEach(($actor) => {\n\n            $actor.onTick($timetick);\n        });\n    }\n}\n\nexport {\n\n    SystemActor\n};\n\nexport default SystemActor;\n","import {Sound, Stage, System, UTILS} from '../index.js';\n\n/**\n * Creates audio systems.\n *\n * @example\n *\n * const system = new SystemAudio();\n */\nclass SystemAudio extends System {\n\n    /**\n     * @typedef {object} TypeDataAudio An audio data.\n     * @property {AudioBufferSourceNode} $audio The audio buffer source node.\n     * @property {GainNode} $gain The gain.\n     * @property {number} $startTime The start time of the audio in the audio context timeline.\n     * @private\n     */\n\n    /**\n     * Stores the safe delay before removing the audio context when the system terminates.\n     * @type {number}\n     * @public\n     * @readonly\n     * @static\n     */\n    static DELAY_CONTEXT_CLEAR_SAFE = 1000;\n\n    /**\n     * Stores the cache of the audio assets.\n     * @type {Map<string, AudioBuffer>}\n     * @private\n     */\n    $cache;\n\n    /**\n     * Stores the audio context.\n     * @type {AudioContext}\n     * @private\n     */\n    $context;\n\n    /**\n     * Stores the mapping between the playing sounds and their audio data.\n     * @type {Map<Sound, TypeDataAudio>}\n     * @private\n     */\n    $mappingSoundsPlaying;\n\n    /**\n     * Creates a new audio system.\n     */\n    constructor() {\n\n        super();\n    }\n\n    /**\n     * Creates the values for the fade out curve.\n     * @param {number} $volume The volume of the sound.\n     * @returns {Array<number>}\n     * @private\n     */\n    $createValuesCurveFadeOut($volume) {\n\n        return [\n\n            - 1 + $volume * 1,\n            - 1 + $volume * 0\n        ];\n    }\n\n    /**\n     * Loads the audio from the given audio file content.\n     * @param {Response} $content The audio file content.\n     * @returns {Promise<AudioBuffer>}\n     * @private\n     */\n    $loadAudio($content) {\n\n        const promise = new Promise(($resolve) => {\n\n            $content.arrayBuffer()\n            .then(($bufferArray) => (this.$context.decodeAudioData($bufferArray)))\n            .then(($bufferAudio) => {\n\n                this.$cache.set($content.url, $bufferAudio);\n\n                $resolve($bufferAudio);\n            });\n        });\n\n        return promise;\n    }\n\n    /**\n     * Prepares the audio from the given audio source.\n     * @param {string} $audio The audio source.\n     * @private\n     */\n    $prepareAudio($audio) {\n\n        if (this.$cache.has($audio) === true) {\n\n            return;\n        }\n\n        this.$cache.set($audio, undefined);\n\n        fetch($audio)\n        .then(($content) => (this.$loadAudio($content)));\n    }\n\n    /**\n     * Terminates the given sound.\n     * @param {Sound} $sound The sound to terminate.\n     * @private\n     */\n    $terminateSound($sound) {\n\n        const {$audio, $gain, $startTime} = this.$mappingSoundsPlaying.get($sound);\n\n        if ($sound.loop === false\n        && this.$context.currentTime > $startTime + Math.max(0, $audio.buffer.duration - ($sound.durationFadeOut / 1000))) {\n\n            return;\n        }\n\n        $gain.gain.cancelScheduledValues(this.$context.currentTime);\n        $gain.gain.setValueCurveAtTime(\n\n            this.$createValuesCurveFadeOut($sound.volume),\n            this.$context.currentTime,\n            Math.min($audio.buffer.duration, $sound.durationFadeOut / 1000)\n        );\n\n        this.$mappingSoundsPlaying.delete($sound);\n\n        $audio.onended = () => {\n\n            $audio.disconnect();\n            $gain.disconnect();\n        };\n    }\n\n    /**\n     * Checks if the system has loaded the given asset.\n     * @param {string} $asset The asset source.\n     * @returns {boolean}\n     * @public\n     */\n    hasAssetLoaded($asset) {\n\n        if (this.$initiated === false) {\n\n            this.initiate();\n        }\n\n        return this.$cache.has($asset) === true;\n    }\n\n    /**\n     * Loads the audio from the given audio file content.\n     * @param {Response} $content The audio file content.\n     * @returns {Promise<AudioBuffer>}\n     * @public\n     */\n    loadAudio($content) {\n\n        if (this.$initiated === false) {\n\n            this.initiate();\n        }\n\n        if (this.$cache.has($content.url) === true) {\n\n            const promise = new Promise(($resolve) => {\n\n                const audio = this.$cache.get($content.url);\n\n                $resolve(audio);\n            });\n\n            return promise;\n        }\n\n        this.$cache.set($content.url, undefined);\n\n        return this.$loadAudio($content);\n    }\n\n    /**\n     * Called when the system is being initiated.\n     * @public\n     */\n    onInitiate() {\n\n        this.$cache = new Map();\n        this.$context = new AudioContext();\n        this.$mappingSoundsPlaying = new Map();\n    }\n\n    /**\n     * Called when the system is being terminated.\n     * @returns {(undefined | Promise<void>)}\n     * @public\n     */\n    onTerminate() {\n\n        let delayFadeOut = 0;\n\n        Array.from(this.$mappingSoundsPlaying.keys()).forEach(($sound) => {\n\n            if ($sound.durationFadeOut > delayFadeOut) {\n\n                delayFadeOut = $sound.durationFadeOut;\n            }\n\n            this.$terminateSound($sound);\n        });\n\n        const promise = new Promise(($resolve) => {\n\n            const handler = () => {\n\n                this.$context.close()\n                .then(() => {\n\n                    this.$context = undefined;\n\n                    $resolve();\n                });\n            };\n\n            window.setTimeout(handler, delayFadeOut + SystemAudio.DELAY_CONTEXT_CLEAR_SAFE);\n        });\n\n        return promise;\n    }\n\n    /**\n     * Called when the system is being updated by one tick update.\n     * @param {object} $parameters The given parameters.\n     * @param {Stage} $parameters.$stage The stage on which to execute the system.\n     * @param {number} $parameters.$timetick The tick duration (in ms).\n     * @public\n     */\n    onTick({$stage, $timetick}) {\n\n        void $timetick;\n\n        /**\n         * @type {Array<Sound>}\n         */\n        const previous = Array.from(this.$mappingSoundsPlaying.keys());\n\n        $stage.actors.forEach(($actor) => {\n\n            $actor.sounds.forEach(($sound) => {\n\n                if (this.$mappingSoundsPlaying.has($sound) === true) {\n\n                    UTILS.extract($sound, previous);\n\n                    return;\n                }\n\n                this.$prepareAudio($sound.audio);\n\n                if (typeof this.$cache.get($sound.audio) === 'undefined') {\n\n                    return;\n                }\n\n                const bufferAudio = this.$cache.get($sound.audio);\n\n                const audio = this.$context.createBufferSource();\n                audio.buffer = bufferAudio;\n                audio.connect(this.$context.destination);\n                audio.start(0);\n\n                const gain = this.$context.createGain();\n                gain.gain.value = $sound.volume - 1;\n                gain.connect(this.$context.destination);\n\n                audio.connect(gain);\n\n                this.$mappingSoundsPlaying.set($sound, {\n\n                    $audio: audio,\n                    $gain: gain,\n                    $startTime: this.$context.currentTime\n                });\n\n                if ($sound.loop === true) {\n\n                    audio.loop = true;\n\n                    return;\n                }\n\n                gain.gain.setValueCurveAtTime(\n\n                    this.$createValuesCurveFadeOut($sound.volume),\n                    this.$context.currentTime + Math.max(0, audio.buffer.duration - ($sound.durationFadeOut / 1000)),\n                    Math.min(audio.buffer.duration, $sound.durationFadeOut / 1000)\n                );\n\n                audio.onended = () => {\n\n                    audio.disconnect();\n                    gain.disconnect();\n\n                    this.$mappingSoundsPlaying.delete($sound);\n\n                    $actor.removeSound($sound);\n                    $actor.onSoundFinish($sound);\n                };\n            });\n        });\n\n        previous.forEach(($sound) => {\n\n            this.$terminateSound($sound);\n        });\n    }\n}\n\nexport {\n\n    SystemAudio\n};\n\nexport default SystemAudio;\n","import {AABB, Actor, COLLIDER_TYPES, Stage, System, Vector2} from '../index.js';\n\n/**\n * Creates collision systems.\n *\n * @example\n *\n * const system = new SystemCollision();\n */\nclass SystemCollision extends System {\n\n    /**\n     * @typedef {Array<Actor>} TypePairActor A pair of actors.\n     * @private\n     */\n\n    /**\n     * Stores the current collision pairs.\n     * @type {Array<TypePairActor>}\n     * @private\n     */\n    $current;\n\n    /**\n     * Stores the previous collision pairs.\n     * @type {Array<TypePairActor>}\n     * @private\n     */\n    $previous;\n\n    /**\n     * Creates a new collision system.\n     */\n    constructor() {\n\n        super();\n    }\n\n    /**\n     * Checks if a collision previously existed between two given actors.\n     * @param {Actor} $dynamic The first actor to check on.\n     * @param {Actor} $inert The second actor to check with.\n     * @returns {boolean}\n     * @private\n     */\n    $hasCollisionPrevious($dynamic, $inert) {\n\n        const result = this.$previous.find(([$dynamicPrevious, $inertPrevious]) => {\n\n            return $dynamic === $dynamicPrevious\n            && $inert === $inertPrevious;\n        });\n\n        return typeof result !== 'undefined';\n    }\n\n    /**\n     * Called when the system is being initiated.\n     * @public\n     */\n    onInitiate() {\n\n        this.$current = [];\n        this.$previous = [];\n    }\n\n    /**\n     * Called when the system is being updated by one tick update.\n     * @param {object} $parameters The given parameters.\n     * @param {Stage} $parameters.$stage The stage on which to execute the system.\n     * @param {number} $parameters.$timetick The tick duration (in ms).\n     * @public\n     */\n    onTick({$stage, $timetick}) {\n\n        void $timetick;\n\n        /**\n         * @typedef {object} TypePairCollision A pair of candidates for collision.\n         * @property {number} $distance The manhattan distance between the two actors.\n         * @property {Actor} $dynamic The first actor.\n         * @property {Actor} $inert The second actor.\n         * @private\n         */\n\n        /**\n         * @type {Array<TypePairCollision>}\n         */\n        const pairs = [];\n\n        /**\n         * @type {Array<Actor>}\n         */\n        const dynamics = [];\n\n        /**\n         * @type {Array<Actor>}\n         */\n        const kinetics = [];\n\n        /**\n         * @type {Array<Actor>}\n         */\n        const statics = [];\n\n        $stage.actors.forEach(($actor) => {\n\n            if ($actor.hasCollider() === false) {\n\n                return;\n            }\n\n            switch ($actor.collider.type) {\n\n                case COLLIDER_TYPES.DYNAMIC: {\n\n                    dynamics.push($actor);\n\n                    break;\n                }\n\n                case COLLIDER_TYPES.KINETIC: {\n\n                    kinetics.push($actor);\n\n                    break;\n                }\n\n                case COLLIDER_TYPES.STATIC: {\n\n                    statics.push($actor);\n\n                    break;\n                }\n            }\n        });\n\n        const inerts = [...statics, ...kinetics];\n\n        if (inerts.length === 0) {\n\n            return;\n        }\n\n        dynamics.forEach(($dynamic) => {\n\n            const boundariesDynamic = $dynamic.collider.boundaries.clone().translate($dynamic.translation);\n            const centerBoundariesDynamic = new AABB(boundariesDynamic.center, boundariesDynamic.center);\n\n            inerts.forEach(($inert) => {\n\n                const boundariesInert = $inert.collider.boundaries.clone().translate($inert.translation);\n\n                const distance = AABB.distanceManhattan(centerBoundariesDynamic, boundariesInert);\n\n                pairs.push({\n\n                    $distance: distance,\n                    $dynamic: $dynamic,\n                    $inert: $inert\n                });\n            });\n        });\n\n        pairs.sort(($a, $b) => {\n\n            return $a.$distance - $b.$distance;\n        });\n\n        pairs.forEach(($pair) => {\n\n            const {$dynamic, $inert} = $pair;\n\n            if ($stage.hasActor($dynamic) === false) {\n\n                return;\n            }\n\n            if ($stage.hasActor($inert) === false) {\n\n                return;\n            }\n\n            const boundariesDynamic = $dynamic.collider.boundaries.clone().translate($dynamic.translation);\n            const boundariesInert = $inert.collider.boundaries.clone().translate($inert.translation);\n\n            const overlapX = AABB.overlapX(boundariesDynamic, boundariesInert);\n\n            if (overlapX <= 0) {\n\n                return;\n            }\n\n            const overlapY = AABB.overlapY(boundariesDynamic, boundariesInert);\n\n            if (overlapY <= 0) {\n\n                return;\n            }\n\n            this.$current.push([$dynamic, $inert]);\n\n            const directionX = Math.sign($inert.translation.x - $dynamic.translation.x);\n            const directionY = Math.sign($inert.translation.y - $dynamic.translation.y);\n\n            const checkMinimumX = (overlapX <= overlapY);\n            const checkMinimumY = (overlapY <= overlapX);\n\n            if ($dynamic.collider.traversable === false\n            && $inert.collider.traversable === false) {\n\n                const resolverDynamic = new Vector2(\n\n                    checkMinimumX ? - directionX * overlapX : 0,\n                    checkMinimumY ? - directionY * overlapY : 0\n                );\n\n                $dynamic.translate(resolverDynamic);\n            }\n\n            const originDynamicEast = checkMinimumX === true && directionX === 1;\n            const originDynamicNorth = checkMinimumY === true && directionY === 1;\n            const originDynamicSouth = checkMinimumY === true && directionY === -1;\n            const originDynamicWest = checkMinimumX === true && directionX === -1;\n\n            if (this.$hasCollisionPrevious($dynamic, $inert) === false) {\n\n                $dynamic.onCollideEnter({\n\n                    $actor: $inert,\n                    $east: originDynamicEast,\n                    $north: originDynamicNorth,\n                    $south: originDynamicSouth,\n                    $west: originDynamicWest\n                });\n\n                $inert.onCollideEnter({\n\n                    $actor: $dynamic,\n                    $east: originDynamicWest,\n                    $north: originDynamicSouth,\n                    $south: originDynamicNorth,\n                    $west: originDynamicEast\n                });\n            }\n\n            $dynamic.onCollide({\n\n                $actor: $inert,\n                $east: originDynamicEast,\n                $north: originDynamicNorth,\n                $south: originDynamicSouth,\n                $west: originDynamicWest\n            });\n\n            $inert.onCollide({\n\n                $actor: $dynamic,\n                $east: originDynamicWest,\n                $north: originDynamicSouth,\n                $south: originDynamicNorth,\n                $west: originDynamicEast\n            });\n        });\n\n        this.$previous.filter(([$dynamicPrevious, $inertPrevious]) => {\n\n            const result = this.$current.find(([$dynamic, $inert]) => {\n\n                return $dynamic === $dynamicPrevious\n                && $inert === $inertPrevious;\n            });\n\n            return typeof result === 'undefined';\n        });\n\n        this.$previous.forEach(([$dynamicPrevious, $inertPrevious]) => {\n\n            $dynamicPrevious.onCollideLeave($inertPrevious);\n            $inertPrevious.onCollideLeave($dynamicPrevious);\n        });\n\n        this.$previous = [...this.$current];\n        this.$current = [];\n    }\n}\n\nexport {\n\n    SystemCollision\n};\n\nexport default SystemCollision;\n","import {EVENT_CODES, EVENT_TYPES, EventGamepadAnalog, EventGamepadDigital, EventGravityAnalog, EventGravityDigital, EventGyroscopeAnalog, EventGyroscopeDigital, EventPointerAnalog, EventPointerDigital, Stage, System} from '../index.js';\n\n/**\n * Creates input systems.\n *\n * @example\n *\n * const system = new SystemInput({$container});\n * system.initiate();\n * system.tick();\n */\nclass SystemInput extends System {\n\n    /**\n     * Stores the container.\n     * @type {HTMLElement}\n     * @private\n     */\n    $container;\n\n    /**\n     * Stores the input events.\n     * @type {Array<Event>}\n     * @private\n     */\n    $events;\n\n    /**\n     * Stores the state of the accepted inputs.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n    $inputs;\n\n    /**\n     * Stores the state of the accepted analog inputs.\n     * @type {Object<string, number>}\n     * @private\n     */\n    $inputsAnalog;\n\n    /**\n     * Creates a new input system.\n     * @param {object} $parameters The given parameters.\n     * @param {HTMLElement} $parameters.$container The container on which to attach input events.\n     */\n    constructor({$container}) {\n\n        super();\n\n        this.$container = $container;\n    }\n\n    /**\n     * Stacks the input events for the next tick.\n     * @param {Event} $event The input event to stack.\n     * @private\n     */\n    $stack($event) {\n\n        $event.preventDefault();\n\n        this.$events.push($event);\n    }\n\n    /**\n     * Gets the current input state value of the given digital input.\n     * @param {string} $input The event code of the given digital input.\n     * @returns {boolean}\n     * @public\n     */\n    getInput($input) {\n\n        const input = this.$inputs[$input];\n\n        if (typeof input === 'undefined') {\n\n            return false;\n        }\n\n        return input;\n    }\n\n    /**\n     * Gets the current input state value of the given analog input.\n     * @param {string} $input The event code of the given analog input.\n     * @returns {number}\n     * @public\n     */\n    getInputAnalog($input) {\n\n        const input = this.$inputsAnalog[$input];\n\n        if (typeof input === 'undefined') {\n\n            return 0;\n        }\n\n        return input;\n    }\n\n    /**\n     * Called when the system is being initiated.\n     * @public\n     */\n    onInitiate() {\n\n        this.$events = [];\n        this.$inputs = {};\n        this.$inputsAnalog = {};\n\n        window.addEventListener(EVENT_TYPES.NATIVE.BLUR, this.$stack.bind(this));\n        window.addEventListener(EVENT_TYPES.NATIVE.CONTEXT_MENU, this.$stack.bind(this));\n\n        window.addEventListener(EVENT_TYPES.GAMEPAD.GAMEPAD_ANALOG, this.$stack.bind(this));\n        window.addEventListener(EVENT_TYPES.GAMEPAD.GAMEPAD_CONNECT, this.$stack.bind(this));\n        window.addEventListener(EVENT_TYPES.GAMEPAD.GAMEPAD_DOWN, this.$stack.bind(this));\n        window.addEventListener(EVENT_TYPES.GAMEPAD.GAMEPAD_UP, this.$stack.bind(this));\n\n        window.addEventListener(EVENT_TYPES.GRAVITY.GRAVITY_ANALOG, this.$stack.bind(this));\n        window.addEventListener(EVENT_TYPES.GRAVITY.GRAVITY_DOWN, this.$stack.bind(this));\n        window.addEventListener(EVENT_TYPES.GRAVITY.GRAVITY_UP, this.$stack.bind(this));\n\n        window.addEventListener(EVENT_TYPES.GYROSCOPE.GYROSCOPE_ANALOG, this.$stack.bind(this));\n        window.addEventListener(EVENT_TYPES.GYROSCOPE.GYROSCOPE_DOWN, this.$stack.bind(this));\n        window.addEventListener(EVENT_TYPES.GYROSCOPE.GYROSCOPE_UP, this.$stack.bind(this));\n\n        window.addEventListener(EVENT_TYPES.POINTER.POINTER_ANALOG, this.$stack.bind(this));\n        window.addEventListener(EVENT_TYPES.POINTER.POINTER_DOWN, this.$stack.bind(this));\n        window.addEventListener(EVENT_TYPES.POINTER.POINTER_UP, this.$stack.bind(this));\n\n        this.$container.addEventListener(EVENT_TYPES.KEYBOARD.KEY_DOWN, this.$stack.bind(this));\n        this.$container.addEventListener(EVENT_TYPES.KEYBOARD.KEY_UP, this.$stack.bind(this));\n    }\n\n    /**\n     * Called when the system is being terminated.\n     * @returns {(undefined | Promise<void>)}\n     * @public\n     */\n    onTerminate() {\n\n        window.removeEventListener(EVENT_TYPES.NATIVE.BLUR, this.$stack.bind(this));\n        window.removeEventListener(EVENT_TYPES.NATIVE.CONTEXT_MENU, this.$stack.bind(this));\n\n        window.removeEventListener(EVENT_TYPES.GAMEPAD.GAMEPAD_ANALOG, this.$stack.bind(this));\n        window.removeEventListener(EVENT_TYPES.GAMEPAD.GAMEPAD_CONNECT, this.$stack.bind(this));\n        window.removeEventListener(EVENT_TYPES.GAMEPAD.GAMEPAD_DOWN, this.$stack.bind(this));\n        window.removeEventListener(EVENT_TYPES.GAMEPAD.GAMEPAD_UP, this.$stack.bind(this));\n\n        window.removeEventListener(EVENT_TYPES.GRAVITY.GRAVITY_ANALOG, this.$stack.bind(this));\n        window.removeEventListener(EVENT_TYPES.GRAVITY.GRAVITY_DOWN, this.$stack.bind(this));\n        window.removeEventListener(EVENT_TYPES.GRAVITY.GRAVITY_UP, this.$stack.bind(this));\n\n        window.removeEventListener(EVENT_TYPES.GYROSCOPE.GYROSCOPE_ANALOG, this.$stack.bind(this));\n        window.removeEventListener(EVENT_TYPES.GYROSCOPE.GYROSCOPE_DOWN, this.$stack.bind(this));\n        window.removeEventListener(EVENT_TYPES.GYROSCOPE.GYROSCOPE_UP, this.$stack.bind(this));\n\n        window.removeEventListener(EVENT_TYPES.POINTER.POINTER_ANALOG, this.$stack.bind(this));\n        window.removeEventListener(EVENT_TYPES.POINTER.POINTER_DOWN, this.$stack.bind(this));\n        window.removeEventListener(EVENT_TYPES.POINTER.POINTER_UP, this.$stack.bind(this));\n\n        this.$container.removeEventListener(EVENT_TYPES.KEYBOARD.KEY_DOWN, this.$stack.bind(this));\n        this.$container.removeEventListener(EVENT_TYPES.KEYBOARD.KEY_UP, this.$stack.bind(this));\n\n        return undefined;\n    }\n\n    /**\n     * Called when the system is being updated by one tick update.\n     * @param {object} $parameters The given parameters.\n     * @param {Stage} $parameters.$stage The stage on which to execute the system.\n     * @param {number} $parameters.$timetick The tick duration (in ms).\n     * @public\n     */\n    onTick({$stage, $timetick}) {\n\n        void $stage;\n        void $timetick;\n\n        if (typeof this.$inputs[EVENT_CODES.GAMEPAD_STANDARD.CONNECTED] !== 'undefined') {\n\n            delete this.$inputs[EVENT_CODES.GAMEPAD_STANDARD.CONNECTED];\n        }\n\n        if (typeof this.$inputs[EVENT_CODES.GAMEPAD_STANDARD.DISCONNECTED] !== 'undefined') {\n\n            delete this.$inputs[EVENT_CODES.GAMEPAD_STANDARD.DISCONNECTED];\n        }\n\n        while (this.$events.length > 0) {\n\n            const $event = this.$events.shift();\n\n            if ($event.type === EVENT_TYPES.NATIVE.BLUR) {\n\n                this.$inputs = {};\n                this.$inputsAnalog = {};\n            }\n\n            else if ($event instanceof EventGamepadAnalog\n            && $event.type === EVENT_TYPES.GAMEPAD.GAMEPAD_ANALOG) {\n\n                this.$inputsAnalog[$event.code] = $event.value;\n            }\n\n            else if ($event instanceof EventGamepadDigital\n            && $event.type === EVENT_TYPES.GAMEPAD.GAMEPAD_CONNECT) {\n\n                this.$inputs[$event.code] = true;\n            }\n\n            else if ($event instanceof EventGamepadDigital\n            && $event.type === EVENT_TYPES.GAMEPAD.GAMEPAD_DOWN) {\n\n                if (typeof this.$inputs[$event.code] === 'undefined') {\n\n                    this.$inputs[$event.code] = true;\n                }\n            }\n\n            else if ($event instanceof EventGamepadDigital\n            && $event.type === EVENT_TYPES.GAMEPAD.GAMEPAD_UP) {\n\n                if (typeof this.$inputs[$event.code] !== 'undefined') {\n\n                    delete this.$inputs[$event.code];\n                }\n            }\n\n            else if ($event instanceof EventGravityAnalog\n            && $event.type === EVENT_TYPES.GRAVITY.GRAVITY_ANALOG) {\n\n                this.$inputsAnalog[$event.code] = $event.value;\n            }\n\n            else if ($event instanceof EventGravityDigital\n            && $event.type === EVENT_TYPES.GRAVITY.GRAVITY_DOWN) {\n\n                if (typeof this.$inputs[$event.code] === 'undefined') {\n\n                    this.$inputs[$event.code] = true;\n                }\n            }\n\n            else if ($event instanceof EventGravityDigital\n            && $event.type === EVENT_TYPES.GRAVITY.GRAVITY_UP) {\n\n                if (typeof this.$inputs[$event.code] !== 'undefined') {\n\n                    delete this.$inputs[$event.code];\n                }\n            }\n\n            else if ($event instanceof EventGyroscopeAnalog\n            && $event.type === EVENT_TYPES.GYROSCOPE.GYROSCOPE_ANALOG) {\n\n                this.$inputsAnalog[$event.code] = $event.value;\n            }\n\n            else if ($event instanceof EventGyroscopeDigital\n            && $event.type === EVENT_TYPES.GYROSCOPE.GYROSCOPE_DOWN) {\n\n                if (typeof this.$inputs[$event.code] === 'undefined') {\n\n                    this.$inputs[$event.code] = true;\n                }\n            }\n\n            else if ($event instanceof EventGyroscopeDigital\n            && $event.type === EVENT_TYPES.GYROSCOPE.GYROSCOPE_UP) {\n\n                if (typeof this.$inputs[$event.code] !== 'undefined') {\n\n                    delete this.$inputs[$event.code];\n                }\n            }\n\n            else if ($event instanceof KeyboardEvent\n            && $event.type === EVENT_TYPES.KEYBOARD.KEY_DOWN) {\n\n                if (typeof this.$inputs[$event.code] === 'undefined') {\n\n                    this.$inputs[$event.code] = true;\n                }\n            }\n\n            else if ($event instanceof KeyboardEvent\n            && $event.type === EVENT_TYPES.KEYBOARD.KEY_UP) {\n\n                if (typeof this.$inputs[$event.code] !== 'undefined') {\n\n                    delete this.$inputs[$event.code];\n                }\n            }\n\n            else if ($event instanceof EventPointerAnalog\n            && $event.type === EVENT_TYPES.POINTER.POINTER_ANALOG) {\n\n                this.$inputsAnalog[$event.code] = $event.value;\n            }\n\n            else if ($event instanceof EventPointerDigital\n            && $event.type === EVENT_TYPES.POINTER.POINTER_DOWN) {\n\n                if (typeof this.$inputs[$event.code] === 'undefined') {\n\n                    this.$inputs[$event.code] = true;\n                }\n            }\n\n            else if ($event instanceof EventPointerDigital\n            && $event.type === EVENT_TYPES.POINTER.POINTER_UP) {\n\n                if (typeof this.$inputs[$event.code] !== 'undefined') {\n\n                    delete this.$inputs[$event.code];\n                }\n            }\n        }\n    }\n}\n\nexport {\n\n    SystemInput\n};\n\nexport default SystemInput;\n","import {AABB, EVENT_TYPES, SHADER_PARAMETER_TYPES, Shader, Sprite, Stage, System, Vector2, Vector3} from '../index.js';\n\n/**\n * Creates render systems.\n *\n * @example\n *\n * const system = new SystemRender({$color, $container, $resolution});\n * system.initiate();\n * system.tick($stage);\n */\nclass SystemRender extends System {\n\n    /**\n     * Stores the texture unit for the textures to preload.\n     * @type {0}\n     * @public\n     * @readonly\n     * @static\n     */\n    static UNIT_TEXTURE_0 = 0;\n\n    /**\n     * Stores the texture unit for the textures.\n     * @type {1}\n     * @public\n     * @readonly\n     * @static\n     */\n    static UNIT_TEXTURE_1 = 1;\n\n    /**\n     * Stores the common vertices positions of the sprites.\n     * @type {WebGLBuffer}\n     * @private\n     */\n    $bufferPosition;\n\n    /**\n     * Stores the cache of the texture assets.\n     * @type {Map<string, WebGLTexture>}\n     * @private\n     */\n    $cache;\n\n    /**\n     * Stores the canvas element.\n     * @type {HTMLCanvasElement}\n     * @private\n     */\n    $canvas;\n\n    /**\n     * Stores the background color.\n     * @type {Vector3}\n     * @private\n     */\n    $color;\n\n    /**\n     * Stores the container.\n     * @type {HTMLElement}\n     * @private\n     */\n    $container;\n\n    /**\n     * Stores the canvas context.\n     * @type {WebGL2RenderingContext}\n     * @private\n     */\n    $context;\n\n    /**\n     * Stores the number of indices of the vertices positions of the sprites.\n     * @type {number}\n     * @private\n     */\n    $indices;\n\n    /**\n     * Stores the shader program attribute locations.\n     * @type {Object<string, number>}\n     * @private\n     */\n    $locationsAttribute;\n\n    /**\n     * Stores the shader program uniform locations.\n     * @type {Object<string, WebGLUniformLocation>}\n     * @private\n     */\n    $locationsUniform;\n\n    /**\n     * Stores the mapping between the texture sources and their uvmappings.\n     * @type {Object<string, WebGLBuffer>}\n     * @private\n     */\n    $mappingBuffersUv;\n\n    /**\n     * Stores the shader program.\n     * @type {WebGLProgram}\n     * @private\n     */\n    $program;\n\n    /**\n     * Stores the ResizeObserver.\n     * @type {ResizeObserver}\n     * @private\n     */\n    $resizeOberver;\n\n    /**\n     * Stores the resolution.\n     * @type {Vector2}\n     * @private\n     */\n    $resolution;\n\n    /**\n     * Stores the fragment shader.\n     * @type {WebGLShader}\n     * @private\n     */\n    $shaderFragment;\n\n    /**\n     * Stores the vertex shader.\n     * @type {WebGLShader}\n     * @private\n     */\n    $shaderVertex;\n\n    /**\n     * Stores the texture of the default texture source.\n     * @type {WebGLTexture}\n     * @private\n     */\n    $textureDefault;\n\n    /**\n     * Creates a new render system.\n     * @param {object} $parameters The given parameters.\n     * @param {Vector3} [$parameters.$color] The rendering background color to use.\n     * @param {HTMLElement} $parameters.$container The container on which to attach the canvas.\n     * @param {Vector2} $parameters.$resolution The rendering resolution to use.\n     */\n    constructor({$color = new Vector3(0, 0, 0), $container, $resolution}) {\n\n        super();\n\n        this.$color = $color;\n        this.$container = $container;\n        this.$resolution = $resolution;\n    }\n\n    /**\n     * Creates the common vertices positions of the sprites.\n     * @private\n     */\n    $createBufferPositions() {\n\n        const positions = [\n\n            -0.5, -0.5,\n            -0.5, 0.5,\n            0.5, 0.5,\n            0.5, -0.5\n        ];\n\n        const bufferPosition = this.$context.createBuffer();\n        this.$context.bindBuffer(this.$context.ARRAY_BUFFER, bufferPosition);\n        this.$context.bufferData(this.$context.ARRAY_BUFFER, new Float32Array(positions), this.$context.STATIC_DRAW);\n\n        this.$bufferPosition = bufferPosition;\n    }\n\n    /**\n     * Creates the uvmapping from the given sprite.\n     * @param {Sprite} $sprite The sprite.\n     * @private\n     */\n    $createBufferUvsOnce($sprite) {\n\n        if (typeof this.$mappingBuffersUv[$sprite.frameSourceSerialized] !== 'undefined') {\n\n            return;\n        }\n\n        const frame = $sprite.frameSource;\n\n        const uvs = [\n\n            frame.minimum.x, frame.maximum.y,\n            frame.minimum.x, frame.minimum.y,\n            frame.maximum.x, frame.minimum.y,\n            frame.maximum.x, frame.maximum.y\n        ];\n\n        const bufferUv = this.$context.createBuffer();\n        this.$context.bindBuffer(this.$context.ARRAY_BUFFER, bufferUv);\n        this.$context.bufferData(this.$context.ARRAY_BUFFER, new Float32Array(uvs), this.$context.STATIC_DRAW);\n\n        this.$mappingBuffersUv[$sprite.frameSourceSerialized] = bufferUv;\n    }\n\n    /**\n     * Creates the indices of the vertices positions of the sprites.\n     * @private\n     */\n    $createIndices() {\n\n        const indices = [\n\n            0,\n            1,\n            2,\n            3\n        ];\n\n        const bufferIndex = this.$context.createBuffer();\n        this.$context.bindBuffer(this.$context.ELEMENT_ARRAY_BUFFER, bufferIndex);\n        this.$context.bufferData(this.$context.ELEMENT_ARRAY_BUFFER, new Uint32Array(indices), this.$context.STATIC_DRAW);\n\n        this.$indices = indices.length;\n    }\n\n    /**\n     * Creates the attributes locations to use by the shader program.\n     * @param {WebGLProgram} $program The shader program.\n     * @param {typeof Shader} $shader The representation of the shader.\n     * @private\n     */\n    $createLocationsAttribute($program, $shader) {\n\n        Object.keys($shader.attributes).forEach(($name) => {\n\n            this.$locationsAttribute[$name] = this.$context.getAttribLocation($program, $name);\n        });\n    }\n\n    /**\n     * Creates the uniform locations to use by the shader program.\n     * @param {WebGLProgram} $program The shader program.\n     * @param {typeof Shader} $shader The representation of the shader.\n     * @private\n     */\n    $createLocationsUniform($program, $shader) {\n\n        Object.keys($shader.uniforms).forEach(($name) => {\n\n            this.$locationsUniform[$name] = this.$context.getUniformLocation($program, $name);\n        });\n    }\n\n    /**\n     * Creates the shader program.\n     * @param {typeof Shader} $shader The representation of the shader.\n     * @private\n     */\n    $createProgram($shader) {\n\n        this.$shaderVertex = this.$context.createShader(this.$context.VERTEX_SHADER);\n        this.$context.shaderSource(this.$shaderVertex, $shader.sourceVertex);\n        this.$context.compileShader(this.$shaderVertex);\n\n        this.$shaderFragment = this.$context.createShader(this.$context.FRAGMENT_SHADER);\n        this.$context.shaderSource(this.$shaderFragment, $shader.sourceFragment);\n        this.$context.compileShader(this.$shaderFragment);\n\n        this.$program = this.$context.createProgram();\n        this.$context.attachShader(this.$program, this.$shaderVertex);\n        this.$context.attachShader(this.$program, this.$shaderFragment);\n        this.$context.linkProgram(this.$program);\n    }\n\n    /**\n     * Creates a texture from the given bitmap texture data.\n     * @param {ImageBitmap} $textureBitmap The bitmap texture data.\n     * @param {number} $unitTexture The target texture unit.\n     * @returns {WebGLTexture}\n     * @private\n     */\n    $createTexture($textureBitmap, $unitTexture) {\n\n        const texture = this.$context.createTexture();\n\n        this.$context.activeTexture($unitTexture);\n        this.$context.bindTexture(this.$context.TEXTURE_2D, texture);\n\n        this.$context.texParameteri(this.$context.TEXTURE_2D, this.$context.TEXTURE_MIN_FILTER, this.$context.NEAREST);\n        this.$context.texParameteri(this.$context.TEXTURE_2D, this.$context.TEXTURE_MAG_FILTER, this.$context.NEAREST);\n        this.$context.texParameteri(this.$context.TEXTURE_2D, this.$context.TEXTURE_WRAP_S, this.$context.CLAMP_TO_EDGE);\n        this.$context.texParameteri(this.$context.TEXTURE_2D, this.$context.TEXTURE_WRAP_T, this.$context.CLAMP_TO_EDGE);\n\n        this.$context.texImage2D(this.$context.TEXTURE_2D, 0, this.$context.RGBA, this.$context.RGBA, this.$context.UNSIGNED_BYTE, $textureBitmap);\n\n        return texture;\n    }\n\n    /**\n     * Creates a default texture (1 pixel texture).\n     * @param {Vector3} $color The target texture unit.\n     * @param {number} $unitTexture The target texture unit.\n     * @returns {WebGLTexture}\n     * @private\n     */\n    $createTextureDefault($color, $unitTexture) {\n\n        const texture = this.$context.createTexture();\n\n        this.$context.activeTexture(this.$context.TEXTURE0 + $unitTexture);\n        this.$context.bindTexture(this.$context.TEXTURE_2D, texture);\n        this.$context.texImage2D(this.$context.TEXTURE_2D, 0, this.$context.RGBA, 1, 1, 0, this.$context.RGBA, this.$context.UNSIGNED_BYTE, new Uint8Array([$color.x, $color.y, $color.z, 255]));\n\n        return texture;\n    }\n\n    /**\n     * Initiates the canvas element.\n     * @private\n     */\n    $initiateCanvas() {\n\n        this.$canvas = document.createElement('canvas');\n        this.$canvas.style.setProperty('width', '100%');\n        this.$canvas.style.setProperty('height', '100%');\n        this.$canvas.style.setProperty('display', 'block');\n        this.$canvas.style.setProperty('outline', '0');\n        this.$canvas.style.setProperty('image-rendering', 'pixelated');\n\n        this.$container.appendChild(this.$canvas);\n\n        this.$resize();\n\n        window.addEventListener(EVENT_TYPES.NATIVE.CLICK, this.$setFocus.bind(this));\n    }\n\n    /**\n     * Initiates the canvas context.\n     * @private\n     */\n    $initiateContext() {\n\n        this.$context = this.$canvas.getContext('webgl2', {\n\n            'antialias': false\n        });\n\n        this.$context.frontFace(this.$context.CW);\n        this.$context.enable(this.$context.CULL_FACE);\n        this.$context.cullFace(this.$context.BACK);\n\n        this.$context.enable(this.$context.BLEND);\n        this.$context.blendFunc(this.$context.SRC_ALPHA, this.$context.ONE_MINUS_SRC_ALPHA);\n\n        this.$createProgram(Shader);\n\n        this.$context.useProgram(this.$program);\n\n        this.$createLocationsUniform(this.$program, Shader);\n        this.$createLocationsAttribute(this.$program, Shader);\n\n        this.$createBufferPositions();\n        this.$createIndices();\n\n        this.$textureDefault = this.$createTextureDefault(new Vector3(127, 127, 127), SystemRender.UNIT_TEXTURE_1);\n\n        window.addEventListener(EVENT_TYPES.NATIVE.BEFORE_UNLOAD, this.$loseContext.bind(this));\n    }\n\n    /**\n     * Loads the texture from the given texture file content.\n     * @param {Response} $content The texture file content.\n     * @param {number} $unitTexture The target texture unit.\n     * @returns {Promise<WebGLTexture>}\n     * @private\n     */\n    $loadTexture($content, $unitTexture) {\n\n        const promise = new Promise(($resolve) => {\n\n            $content.blob()\n            .then(($blob) => (createImageBitmap($blob)))\n            .then(($textureBitmap) => {\n\n                const texture = this.$createTexture($textureBitmap, $unitTexture);\n\n                this.$cache.set($content.url, texture);\n\n                $resolve(texture);\n            });\n        });\n\n        return promise;\n    }\n\n    /**\n     * Loses the canvas context.\n     * @private\n     */\n    $loseContext() {\n\n        if (this.$context instanceof WebGL2RenderingContext === false) {\n\n            return;\n        }\n\n        if (this.$context.getExtension('WEBGL_lose_context') === null) {\n\n            return;\n        }\n\n        this.$context.getExtension('WEBGL_lose_context').loseContext();\n    }\n\n    /**\n     * Prepares the texture from the given texture source.\n     * @param {string} $texture The texture source.\n     * @param {number} $unitTexture The target texture unit.\n     * @private\n     */\n    $prepareTexture($texture, $unitTexture) {\n\n        if (this.$cache.has($texture) === true) {\n\n            return;\n        }\n\n        this.$cache.set($texture, undefined);\n\n        fetch($texture)\n        .then(($content) => (this.$loadTexture($content, $unitTexture)));\n    }\n\n    /**\n     * Resets the canvas.\n     * @param {number} $width The context viewport width.\n     * @param {number} $height The context viewport height.\n     * @private\n     */\n    $resetCanvas($width, $height) {\n\n        this.$context.clearColor(this.$color.x, this.$color.y, this.$color.z, 1);\n        this.$context.clearDepth(1);\n\n        this.$context.viewport(0, 0, $width, $height);\n        this.$context.clear(this.$context.COLOR_BUFFER_BIT | this.$context.DEPTH_BUFFER_BIT);\n    }\n\n    /**\n     * Resizes the rendering context.\n     * @private\n     */\n    $resize() {\n\n        const width = this.$resolution.x;\n        const height = this.$resolution.y;\n\n        const widthContext = Math.max(width, Math.floor(height * this.$canvas.clientWidth / this.$canvas.clientHeight));\n        const heightContext = Math.max(height, Math.floor(width * this.$canvas.clientHeight / this.$canvas.clientWidth));\n\n        this.$canvas.setAttribute('width', '' + Math.floor(widthContext / 2) * 2);\n        this.$canvas.setAttribute('height', '' + Math.floor(heightContext / 2) * 2);\n    }\n\n    /**\n     * Sends an attribute to the shader program.\n     * @param {typeof Shader} $shader The representation of the shader.\n     * @param {string} $name The name of the attribute.\n     * @param {any} $value The value of the attribute.\n     * @private\n     */\n    $sendAttribute($shader, $name, $value) {\n\n        if (typeof $shader.attributes[$name] === 'undefined') {\n\n            return;\n        }\n\n        const type = $shader.attributes[$name];\n\n        switch (type) {\n\n            case SHADER_PARAMETER_TYPES.VECTOR_2: {\n\n                this.$context.bindBuffer(this.$context.ARRAY_BUFFER, $value);\n                const location = this.$locationsAttribute[$name];\n                this.$context.vertexAttribPointer(location, 2, this.$context.FLOAT, false, 0, 0);\n                this.$context.enableVertexAttribArray(location);\n\n                break;\n            }\n\n            case SHADER_PARAMETER_TYPES.VECTOR_3: {\n\n                this.$context.bindBuffer(this.$context.ARRAY_BUFFER, $value);\n                const location = this.$locationsAttribute[$name];\n                this.$context.vertexAttribPointer(location, 3, this.$context.FLOAT, false, 0, 0);\n                this.$context.enableVertexAttribArray(location);\n\n                break;\n            }\n        }\n    }\n\n    /**\n     * Sends a uniform to the shader program.\n     * @param {typeof Shader} $shader The representation of the shader.\n     * @param {string} $name The name of the uniform.\n     * @param {any} $value The value of the uniform.\n     * @private\n     */\n    $sendUniform($shader, $name, $value) {\n\n        if (typeof $shader.uniforms[$name] === 'undefined') {\n\n            return;\n        }\n\n        const type = $shader.uniforms[$name];\n\n        switch (type) {\n\n            case SHADER_PARAMETER_TYPES.BOOLEAN:\n            case SHADER_PARAMETER_TYPES.INTEGER:\n            case SHADER_PARAMETER_TYPES.SAMPLER_2D: {\n\n                this.$context.uniform1i(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case SHADER_PARAMETER_TYPES.ARRAY_BOOLEAN:\n            case SHADER_PARAMETER_TYPES.ARRAY_INTEGER: {\n\n                this.$context.uniform1iv(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case SHADER_PARAMETER_TYPES.FLOAT: {\n\n                this.$context.uniform1f(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case SHADER_PARAMETER_TYPES.ARRAY_FLOAT: {\n\n                this.$context.uniform1fv(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case SHADER_PARAMETER_TYPES.MATRIX_4:\n            case SHADER_PARAMETER_TYPES.ARRAY_MATRIX_4: {\n\n                this.$context.uniformMatrix4fv(this.$locationsUniform[$name], false, $value);\n\n                break;\n            }\n\n            case SHADER_PARAMETER_TYPES.VECTOR_2:\n            case SHADER_PARAMETER_TYPES.ARRAY_VECTOR_2: {\n\n                this.$context.uniform2fv(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n\n            case SHADER_PARAMETER_TYPES.VECTOR_3:\n            case SHADER_PARAMETER_TYPES.ARRAY_VECTOR_3: {\n\n                this.$context.uniform3fv(this.$locationsUniform[$name], $value);\n\n                break;\n            }\n        }\n    }\n\n    /**\n     * Sets the focus on the canvas element.\n     * @public\n     */\n    $setFocus() {\n\n        this.$canvas.setAttribute('tabindex', '0');\n        this.$canvas.focus();\n    }\n\n    /**\n     * Terminates the canvas.\n     * @private\n     */\n    $terminateCanvas() {\n\n        window.removeEventListener(EVENT_TYPES.NATIVE.CLICK, this.$setFocus.bind(this));\n\n        this.$container.removeChild(this.$canvas);\n    }\n\n    /**\n     * Terminates the canvas context.\n     * @private\n     */\n    $terminateContext() {\n\n        window.removeEventListener(EVENT_TYPES.NATIVE.BEFORE_UNLOAD, this.$loseContext.bind(this));\n\n        this.$context.deleteBuffer(this.$bufferPosition);\n\n        Object.values(this.$mappingBuffersUv).forEach(($buffer) => {\n\n            this.$context.deleteBuffer($buffer);\n        });\n\n        this.$context.deleteTexture(this.$textureDefault);\n\n        this.$cache.forEach(($texture) => {\n\n            this.$context.deleteTexture($texture);\n        });\n\n        this.$context.deleteShader(this.$shaderFragment);\n        this.$context.deleteShader(this.$shaderVertex);\n\n        this.$context.deleteProgram(this.$program);\n\n        this.$context = undefined;\n    }\n\n    /**\n     * Gets the position in the current stage from the given clipped position in the screen.\n     * @param {Stage} $stage The current stage.\n     * @param {Vector2} $vector The position in the screen (with values in [-1, 1] ranges).\n     * @returns {Vector2}\n     * @public\n     */\n    getTranslationFromScreen($stage, $vector) {\n\n        const width = this.$resolution.x;\n        const height = this.$resolution.y;\n\n        const widthContext = Math.max(width, Math.floor(height * this.$canvas.clientWidth / this.$canvas.clientHeight));\n        const heightContext = Math.max(height, Math.floor(width * this.$canvas.clientHeight / this.$canvas.clientWidth));\n\n        return new Vector2(\n\n            Math.floor(($vector.x * widthContext / 2) + $stage.pointOfView.translation.x),\n            - Math.floor(($vector.y * heightContext / 2) - $stage.pointOfView.translation.y)\n        );\n    }\n\n    /**\n     * Checks if the system has loaded the given asset.\n     * @param {string} $asset The asset source.\n     * @returns {boolean}\n     * @public\n     */\n    hasAssetLoaded($asset) {\n\n        if (this.$initiated === false) {\n\n            this.initiate();\n        }\n\n        return this.$cache.has($asset) === true;\n    }\n\n    /**\n     * Loads the texture from the given texture file content.\n     * @param {Response} $content The texture file content.\n     * @returns {Promise<WebGLTexture>}\n     * @public\n     */\n    loadTexture($content) {\n\n        if (this.$initiated === false) {\n\n            this.initiate();\n        }\n\n        if (this.$cache.has($content.url) === true) {\n\n            const promise = new Promise(($resolve) => {\n\n                const texture = this.$cache.get($content.url);\n\n                $resolve(texture);\n            });\n\n            return promise;\n        }\n\n        this.$cache.set($content.url, undefined);\n\n        return this.$loadTexture($content, this.$context.TEXTURE0 + SystemRender.UNIT_TEXTURE_0);\n    }\n\n    /**\n     * Called when the system is being initiated.\n     * @public\n     */\n    onInitiate() {\n\n        this.$cache = new Map();\n        this.$indices = 0;\n        this.$locationsAttribute = {};\n        this.$locationsUniform = {};\n        this.$mappingBuffersUv = {};\n\n        this.$initiateCanvas();\n        this.$initiateContext();\n\n        this.$resizeOberver = new ResizeObserver(this.$resize.bind(this));\n        this.$resizeOberver.observe(this.$container);\n    }\n\n    /**\n     * Called when the system is being terminated.\n     * @returns {(undefined | Promise<void>)}\n     * @public\n     */\n    onTerminate() {\n\n        this.$resizeOberver.disconnect();\n\n        this.$terminateContext();\n        this.$terminateCanvas();\n\n        return undefined;\n    }\n\n    /**\n     * Called when the system is being updated by one tick update.\n     * @param {object} $parameters The given parameters.\n     * @param {Stage} $parameters.$stage The stage on which to execute the system.\n     * @param {number} $parameters.$timetick The tick duration (in ms).\n     * @public\n     */\n    onTick({$stage, $timetick}) {\n\n        void $timetick;\n\n        this.$resetCanvas(this.$canvas.width, this.$canvas.height);\n\n        this.$sendUniform(Shader, 'uniformAspect', [this.$canvas.width, this.$canvas.height]);\n        this.$sendUniform(Shader, 'uniformTranslationPointOfView', [Math.floor($stage.pointOfView.translation.x), Math.floor($stage.pointOfView.translation.y)]);\n\n        this.$sendAttribute(Shader, 'attributePosition', this.$bufferPosition);\n\n        const boundariesViewport = AABB\n        .fromSize(new Vector2(this.$canvas.width, this.$canvas.height))\n        .translate($stage.pointOfView.translation);\n\n        const actors = $stage.actors.filter(($actor) => {\n\n            if ($actor.hasSprite() === false) {\n\n                return false;\n            }\n\n            if ($actor.visible === false) {\n\n                return false;\n            }\n\n            const boundariesSprite = AABB\n            .fromSize($actor.sprite.sizeTarget)\n            .translate($actor.translation);\n\n            const overlapX = AABB.overlapX(boundariesViewport, boundariesSprite);\n\n            if (overlapX <= 0) {\n\n                return false;\n            }\n\n            const overlapY = AABB.overlapY(boundariesViewport, boundariesSprite);\n\n            if (overlapY <= 0) {\n\n                return false;\n            }\n\n            return true;\n        });\n\n        actors.sort(($a, $b) => {\n\n            return $a.zIndex - $b.zIndex;\n        });\n\n        actors.forEach(($actor) => {\n\n            let texture = this.$textureDefault;\n\n            this.$prepareTexture($actor.sprite.texture, this.$context.TEXTURE0 + SystemRender.UNIT_TEXTURE_1);\n\n            if (typeof this.$cache.get($actor.sprite.texture) !== 'undefined') {\n\n                texture = this.$cache.get($actor.sprite.texture);\n            }\n\n            this.$context.activeTexture(this.$context.TEXTURE0 + SystemRender.UNIT_TEXTURE_1);\n            this.$context.bindTexture(this.$context.TEXTURE_2D, texture);\n            this.$sendUniform(Shader, 'uniformTexture', SystemRender.UNIT_TEXTURE_1);\n\n            this.$sendUniform(Shader, 'uniformSize', [$actor.sprite.sizeTarget.x, $actor.sprite.sizeTarget.y]);\n            this.$sendUniform(Shader, 'uniformTranslation', [Math.floor($actor.translation.x), Math.floor($actor.translation.y)]);\n\n            this.$createBufferUvsOnce($actor.sprite);\n            this.$sendAttribute(Shader, 'attributeUvmapping', this.$mappingBuffersUv[$actor.sprite.frameSourceSerialized]);\n\n            this.$context.drawElements(this.$context.TRIANGLE_FAN, this.$indices, this.$context.UNSIGNED_INT, 0);\n        });\n    }\n\n    /**\n     * Removes the native pointer display.\n     * @public\n     */\n    removePointerNative() {\n\n        if (this.$initiated === false) {\n\n            this.initiate();\n        }\n\n        this.$canvas.style.setProperty('cursor', 'none');\n    }\n\n    /**\n     * Sets the rendering background color.\n     * @param {Vector3} $color The rendering background color to set.\n     * @public\n     */\n    setColor($color) {\n\n        this.$color = $color;\n    }\n\n    /**\n     * Sets the rendering resolution.\n     * @param {Vector2} $resolution The rendering resolution to set.\n     * @public\n     */\n    setResolution($resolution) {\n\n        this.$resolution = $resolution.clone();\n\n        this.$resize();\n    }\n}\n\nexport {\n\n    SystemRender\n};\n\nexport default SystemRender;\n","import {EVENT_CODES, EVENT_TYPES, EventGamepad, EventGamepadDigital, Stage, System, UTILS, Vibration} from '../index.js';\n\n/**\n * Creates vibration systems.\n *\n * @example\n *\n * const system = new SystemVibration();\n */\nclass SystemVibration extends System {\n\n    /**\n     * Stores the delay before a vibration ends.\n     * @type {number}\n     * @public\n     * @readonly\n     * @static\n     */\n    static DELAY_VIBRATION_END = 1000;\n\n    /**\n     * Stores the mapping between the playing vibrations and their elapsed time.\n     * @type {Map<Vibration, number>}\n     * @private\n     */\n    $mappingVibrationsPlaying;\n\n    /**\n     * Creates a new vibration system.\n     */\n    constructor() {\n\n        super();\n    }\n\n    /**\n     * Called when the system is being initiated.\n     * @public\n     */\n    onInitiate() {\n\n        this.$mappingVibrationsPlaying = new Map();\n    }\n\n    /**\n     * Called when the system is being terminated.\n     * @returns {(undefined | Promise<void>)}\n     * @public\n     */\n    onTerminate() {\n\n        window.dispatchEvent(new EventGamepadDigital(EVENT_TYPES.GAMEPAD.GAMEPAD_VIBRATE, EVENT_CODES.GAMEPAD_STANDARD.VIBRATE_END));\n\n        return undefined;\n    }\n\n    /**\n     * Called when the system is being updated by one tick update.\n     * @param {object} $parameters The given parameters.\n     * @param {Stage} $parameters.$stage The stage on which to execute the system.\n     * @param {number} $parameters.$timetick The tick duration (in ms).\n     * @public\n     */\n    onTick({$stage, $timetick}) {\n\n        /**\n         * @type {Array<Vibration>}\n         */\n        const previous = Array.from(this.$mappingVibrationsPlaying.keys());\n\n        $stage.actors.forEach(($actor) => {\n\n            /**\n             * @type {Array<Vibration>}\n             */\n            const finished = [];\n\n            $actor.vibrations.forEach(($vibration) => {\n\n                if (this.$mappingVibrationsPlaying.has($vibration) === false) {\n\n                    this.$mappingVibrationsPlaying.set($vibration, 0);\n\n                    return;\n                }\n\n                const elapsedTime = this.$mappingVibrationsPlaying.get($vibration) + $timetick;\n\n                if (elapsedTime >= $vibration.duration) {\n\n                    finished.push($vibration);\n\n                    return;\n                }\n\n                this.$mappingVibrationsPlaying.set($vibration, elapsedTime);\n\n                UTILS.extract($vibration, previous);\n            });\n\n            finished.forEach(($vibration) => {\n\n                $actor.removeVibration($vibration);\n            });\n        });\n\n        previous.forEach(($vibration) => {\n\n            this.$mappingVibrationsPlaying.delete($vibration);\n        });\n\n        /**\n         * @type {Array<Vibration>}\n         */\n        const current = Array.from(this.$mappingVibrationsPlaying.keys());\n\n        let intensityFrequencyHigh = 0;\n        let intensityFrequencyLow = 0;\n\n        current.forEach(($vibration) => {\n\n            intensityFrequencyHigh = Math.max(intensityFrequencyHigh, $vibration.intensityFrequencyHigh);\n            intensityFrequencyLow = Math.max(intensityFrequencyLow, $vibration.intensityFrequencyLow);\n        });\n\n        window.dispatchEvent(new EventGamepad(EVENT_TYPES.GAMEPAD.GAMEPAD_VIBRATE, EVENT_CODES.GAMEPAD_STANDARD.VIBRATE_START, new Vibration({\n\n            $duration: SystemVibration.DELAY_VIBRATION_END,\n            $intensityFrequencyHigh: intensityFrequencyHigh,\n            $intensityFrequencyLow: intensityFrequencyLow\n        })));\n    }\n}\n\nexport {\n\n    SystemVibration\n};\n\nexport default SystemVibration;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(864);\n"],"names":["webpackQueues","webpackExports","webpackError","resolveQueue","activate","engine","initiate","preloadStage","createStage","stateColor","stateResolution","ActorWithSpritesheet","$aseprite","$loop","$tag","$spritesheet","onCreate","this","Spritesheet","animate","onTick","$timetick","tick","sprite","setSprite","PreloadableAseprite","static","texture","Aseprite","$sprites","$tags","$texture","constructor","$data","Map","frames","forEach","$frame","$frameSource","frame","x","meta","size","w","y","h","$sizeTarget","set","duration","frameTags","subset","Array","from","entries","slice","to","name","getSprites","has","first","keys","get","$sprite","$timeline","sprites","timecode","keyframes","map","$duration","timelinekeyframe","$onEnter","$timecode","push","seekTimecode","ActorOverlayGamepad","$actorsInput","$connected","$actionConnected","$actionDisconnected","$createActorsInputButton","mappingInputsButtonRendering","$input","$activated","$idle","ActorInput","getInput","actor","stage","createActor","setVisible","visible","setZIndex","zIndex","translate","translation","clone","$createActorsInputStickLeft","ActorInputStickLeft","actorInputStickLeft","$createActorsInputStickRight","ActorInputStickRight","actorInputStickRight","$removeActorsInputs","$actor","removeActor","onBeforeRemove","onSetVisible","$visible","onSetZIndex","$zIndex","onTranslate","$translation","StageOverlayGamepad","setColor","getState","setResolution","stateStage","getStage","DYNAMIC","KINETIC","STATIC","CLUSTER_RIGHT_BUTTON_BOTTOM","CLUSTER_RIGHT_BUTTON_RIGHT","CLUSTER_RIGHT_BUTTON_LEFT","CLUSTER_RIGHT_BUTTON_TOP","CLUSTER_FRONT_BUTTON_TOP_LEFT","CLUSTER_FRONT_BUTTON_TOP_RIGHT","CLUSTER_FRONT_BUTTON_BOTTOM_LEFT","CLUSTER_FRONT_BUTTON_BOTTOM_RIGHT","CLUSTER_CENTER_BUTTON_LEFT","CLUSTER_CENTER_BUTTON_RIGHT","STICK_LEFT_BUTTON","STICK_RIGHT_BUTTON","CLUSTER_LEFT_BUTTON_TOP","CLUSTER_LEFT_BUTTON_BOTTOM","CLUSTER_LEFT_BUTTON_LEFT","CLUSTER_LEFT_BUTTON_RIGHT","CLUSTER_CENTER_BUTTON_CENTER","STICK_LEFT_LEFT","STICK_LEFT_RIGHT","STICK_LEFT_UP","STICK_LEFT_DOWN","STICK_RIGHT_LEFT","STICK_RIGHT_RIGHT","STICK_RIGHT_UP","STICK_RIGHT_DOWN","CONNECTED","DISCONNECTED","VIBRATE_END","VIBRATE_START","A","B","X","Y","LB","RB","LT","RT","BACK","START","LSB","RSB","UP","DOWN","LEFT","RIGHT","XBOX","LS_LEFT","LS_RIGHT","LS_UP","LS_DOWN","RS_LEFT","RS_RIGHT","RS_UP","RS_DOWN","DIRECTION_X_NEGATIVE","DIRECTION_X_POSITIVE","DIRECTION_Y_NEGATIVE","DIRECTION_Y_POSITIVE","DIRECTION_Z_NEGATIVE","DIRECTION_Z_POSITIVE","ROTATION_X_NEGATIVE","ROTATION_X_POSITIVE","ROTATION_Y_NEGATIVE","ROTATION_Y_POSITIVE","ROTATION_Z_NEGATIVE","ROTATION_Z_POSITIVE","GAMEPAD_ANALOG","GAMEPAD_CONNECT","GAMEPAD_DOWN","GAMEPAD_UP","GAMEPAD_VIBRATE","GRAVITY_ANALOG","GRAVITY_DOWN","GRAVITY_UP","GYROSCOPE_ANALOG","GYROSCOPE_DOWN","GYROSCOPE_UP","KEY_DOWN","KEY_UP","BEFORE_UNLOAD","BLUR","CLICK","CONTEXT_MENU","GAMEPAD_CONNECTED","GAMEPAD_DISCONNECTED","POINTER_ANALOG","POINTER_DOWN","POINTER_UP","RADIANS","Math","PI","AUDIO","IMAGE","ARRAY_BOOLEAN","ARRAY_FLOAT","ARRAY_INTEGER","ARRAY_MATRIX_4","ARRAY_VECTOR_2","ARRAY_VECTOR_3","BOOLEAN","FLOAT","INTEGER","MATRIX_4","SAMPLER_2D","VECTOR_2","VECTOR_3","Preloadable","Actor","$collider","$components","$identifier","$listenerActions","$listenersStates","$sounds","$stage","$uuid","$vibrations","collider","identifier","sounds","uuid","vibrations","super","Vector2","$setListener","$action","$handler","$trigger","$state","Object","hasOwn","addListener","addSound","$sound","addVibration","$vibration","getComponent","$name","hasCollider","Collider","hasComponent","hasSprite","Sprite","onAfterRemove","onCollide","$east","$north","$south","$west","onCollideEnter","onCollideLeave","onSoundFinish","$vector","removeCollider","undefined","removeComponent","removeSound","removeSounds","removeSprite","removeVibration","removeVibrations","setCollider","setComponent","$component","setIdentifier","add","translateTo","subtract","trigger","Stage","$actors","$engine","$pointOfView","actors","pointOfView","hasActor","indexOf","index","splice","removeActors","length","setPointOfView","AABB","$maximum","$minimum","center","minimum","halfSize","scale","maximum","distanceManhattan","$a","$b","distanceX","distanceY","max","abs","$aabb","fromSize","$size","overlapX","distanceCenter","overlapY","$boundaries","$traversable","$type","boundaries","traversable","type","Engine","$color","$container","$next","$preloaded","$resolution","$systemActor","$systemAudio","$systemCollision","$systemInput","$systemRender","$systemVibration","container","document","body","Loop","bind","Set","SystemActor","SystemAudio","SystemCollision","SystemInput","SystemRender","SystemVibration","$createStage","getInputAnalog","getTranslationFromScreen","hasAssetLoaded","$asset","$tickrateMinimum","promises","preloadables","promise","Promise","$resolve","fetch","then","$content","contentType","headers","mediaType","toLowerCase","split","loadAudio","$bufferAudio","loadTexture","all","removePointerNative","terminate","ActorWithPreloadables","$preloadables","$preloadable","PreloadableSound","PreloadableTexture","StageWithPreloadables","$timePrevious","$scope","window","timeCurrent","performance","now","timetickCurrent","timetickMinimum","timetickSafe","min","requestAnimationFrame","cancelAnimationFrame","Shader","$frameSourceSerialized","frameSource","frameSourceSerialized","sizeTarget","JSON","stringify","State","$watchers","setState","unwatchAll","unwatchState","watchState","System","$initiated","onInitiate","onTerminate","terminated","Timeline","$keyframes","sort","seekName","result","find","$keyframe","onEnter","previous","current","TimelineKeyframe","deduplicate","$array","extract","$item","ready","id","check","navigator","userActivation","hasBeenActive","sleep","$delay","setTimeout","crypto","randomUUID","$x","$y","equal","sqrt","multiply","negate","normalize","rotate","$angle","radians","cosine","cos","sine","sin","$factor","$z","z","$quaternion","xq","yq","zq","xu","yu","zu","xv","yv","zv","Vibration","$intensityFrequencyHigh","$intensityFrequencyLow","intensityFrequencyHigh","intensityFrequencyLow","EventGamepad","Event","$code","code","vibration","EventGamepadAnalog","$value","value","EventGamepadDigital","$GAMEPAD_AXES","$GAMEPAD_BUTTONS","ExtensionGamepad","$indexLastConnected","$stateGamepad","$unloaded","flat","addEventListener","$onBeforeUnload","$onConnect","$onDisconnect","$onVibrate","$update","gamepad","getGamepads","vibrationActuator","reset","$event","mapping","dispatchEvent","playEffect","startDelay","strongMagnitude","weakMagnitude","Gamepad","$button","$index","button","buttons","pressed","axes","$direction","axeMinimum","axeMaximum","sign","$cache","$context","$mappingSoundsPlaying","$createValuesCurveFadeOut","$volume","$loadAudio","arrayBuffer","$bufferArray","decodeAudioData","url","$prepareAudio","$audio","$terminateSound","$gain","$startTime","loop","currentTime","buffer","durationFadeOut","gain","cancelScheduledValues","setValueCurveAtTime","volume","delete","onended","disconnect","AudioContext","delayFadeOut","close","DELAY_CONTEXT_CLEAR_SAFE","audio","bufferAudio","createBufferSource","connect","destination","start","createGain","$current","$previous","$hasCollisionPrevious","$dynamic","$inert","$dynamicPrevious","$inertPrevious","pairs","dynamics","kinetics","statics","inerts","boundariesDynamic","centerBoundariesDynamic","boundariesInert","distance","$distance","$pair","directionX","directionY","checkMinimumX","checkMinimumY","resolverDynamic","originDynamicEast","originDynamicNorth","originDynamicSouth","originDynamicWest","filter","$events","$inputs","$inputsAnalog","$stack","preventDefault","input","removeEventListener","shift","KeyboardEvent","$bufferPosition","$canvas","$indices","$locationsAttribute","$locationsUniform","$mappingBuffersUv","$program","$resizeOberver","$shaderFragment","$shaderVertex","$textureDefault","$createBufferPositions","bufferPosition","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","$createBufferUvsOnce","uvs","bufferUv","$createIndices","indices","bufferIndex","ELEMENT_ARRAY_BUFFER","Uint32Array","$createLocationsAttribute","$shader","attributes","getAttribLocation","$createLocationsUniform","uniforms","getUniformLocation","$createProgram","createShader","VERTEX_SHADER","shaderSource","sourceVertex","compileShader","FRAGMENT_SHADER","sourceFragment","createProgram","attachShader","linkProgram","$createTexture","$textureBitmap","$unitTexture","createTexture","activeTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","RGBA","UNSIGNED_BYTE","$createTextureDefault","TEXTURE0","Uint8Array","$initiateCanvas","createElement","style","setProperty","appendChild","$resize","$setFocus","$initiateContext","getContext","frontFace","CW","enable","CULL_FACE","cullFace","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","useProgram","UNIT_TEXTURE_1","$loseContext","$loadTexture","blob","$blob","createImageBitmap","WebGL2RenderingContext","getExtension","loseContext","$prepareTexture","$resetCanvas","$width","$height","clearColor","clearDepth","viewport","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","width","height","widthContext","floor","clientWidth","clientHeight","heightContext","setAttribute","$sendAttribute","location","vertexAttribPointer","enableVertexAttribArray","$sendUniform","uniform1i","uniform1iv","uniform1f","uniform1fv","uniformMatrix4fv","uniform2fv","uniform3fv","focus","$terminateCanvas","removeChild","$terminateContext","deleteBuffer","values","$buffer","deleteTexture","deleteShader","deleteProgram","UNIT_TEXTURE_0","ResizeObserver","observe","boundariesViewport","boundariesSprite","drawElements","TRIANGLE_FAN","UNSIGNED_INT","$mappingVibrationsPlaying","finished","elapsedTime","DELAY_VIBRATION_END","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","Symbol","queue","d","fn","r","a","hasAwait","currentDeps","outerResolve","reject","depQueues","resolve","rej","deps","dep","obj","e","ret","wrapDeps","getResult","fnQueue","q","err","definition","key","o","defineProperty","enumerable","g","globalThis","Function","prop","prototype","hasOwnProperty","call","toStringTag","scriptUrl","importScripts","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","i","test","Error","replace","p"],"sourceRoot":""}